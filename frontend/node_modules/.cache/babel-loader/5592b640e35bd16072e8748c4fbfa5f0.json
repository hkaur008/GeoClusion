{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _objectSpread = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleAuth = exports.CLOUD_SDK_CLIENT_ID = void 0;\n\nvar child_process_1 = require(\"child_process\");\n\nvar fs = require(\"fs\");\n\nvar gcpMetadata = require(\"gcp-metadata\");\n\nvar os = require(\"os\");\n\nvar path = require(\"path\");\n\nvar crypto_1 = require(\"../crypto/crypto\");\n\nvar transporters_1 = require(\"../transporters\");\n\nvar computeclient_1 = require(\"./computeclient\");\n\nvar idtokenclient_1 = require(\"./idtokenclient\");\n\nvar envDetect_1 = require(\"./envDetect\");\n\nvar jwtclient_1 = require(\"./jwtclient\");\n\nvar refreshclient_1 = require(\"./refreshclient\");\n\nvar externalclient_1 = require(\"./externalclient\");\n\nvar baseexternalclient_1 = require(\"./baseexternalclient\");\n\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\n\nvar GoogleAuth = /*#__PURE__*/function () {\n  function GoogleAuth(opts) {\n    _classCallCheck(this, GoogleAuth);\n\n    /**\n     * Caches a value indicating whether the auth layer is running on Google\n     * Compute Engine.\n     * @private\n     */\n    this.checkIsGCE = undefined; // To save the contents of the JSON credential file\n\n    this.jsonContent = null;\n    this.cachedCredential = null;\n    opts = opts || {};\n    this._cachedProjectId = opts.projectId || null;\n    this.keyFilename = opts.keyFilename || opts.keyFile;\n    this.scopes = opts.scopes;\n    this.jsonContent = opts.credentials || null;\n    this.clientOptions = opts.clientOptions;\n  } // Note:  this properly is only public to satisify unit tests.\n  // https://github.com/Microsoft/TypeScript/issues/5228\n\n\n  _createClass(GoogleAuth, [{\n    key: \"isGCE\",\n    get: function get() {\n      return this.checkIsGCE;\n    } // GAPIC client libraries should always use self-signed JWTs. The following\n    // variables are set on the JWT client in order to indicate the type of library,\n    // and sign the JWT with the correct audience and scopes (if not supplied).\n\n  }, {\n    key: \"setGapicJWTValues\",\n    value: function setGapicJWTValues(client) {\n      client.defaultServicePath = this.defaultServicePath;\n      client.useJWTAccessWithScope = this.useJWTAccessWithScope;\n      client.defaultScopes = this.defaultScopes;\n    }\n  }, {\n    key: \"getProjectId\",\n    value: function getProjectId(callback) {\n      if (callback) {\n        this.getProjectIdAsync().then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.getProjectIdAsync();\n      }\n    }\n  }, {\n    key: \"getProjectIdAsync\",\n    value: function getProjectIdAsync() {\n      var _this = this;\n\n      if (this._cachedProjectId) {\n        return Promise.resolve(this._cachedProjectId);\n      } // In implicit case, supports three environments. In order of precedence,\n      // the implicit environments are:\n      // - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n      // - GOOGLE_APPLICATION_CREDENTIALS JSON file\n      // - Cloud SDK: `gcloud config config-helper --format json`\n      // - GCE project ID from metadata server)\n\n\n      if (!this._getDefaultProjectIdPromise) {\n        // TODO: refactor the below code so that it doesn't mix and match\n        // promises and async/await.\n        this._getDefaultProjectIdPromise = new Promise(\n        /*#__PURE__*/\n        // eslint-disable-next-line no-async-promise-executor\n        function () {\n          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve, reject) {\n            var projectId;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.t3 = _this.getProductionProjectId();\n\n                    if (_context.t3) {\n                      _context.next = 6;\n                      break;\n                    }\n\n                    _context.next = 5;\n                    return _this.getFileProjectId();\n\n                  case 5:\n                    _context.t3 = _context.sent;\n\n                  case 6:\n                    _context.t2 = _context.t3;\n\n                    if (_context.t2) {\n                      _context.next = 11;\n                      break;\n                    }\n\n                    _context.next = 10;\n                    return _this.getDefaultServiceProjectId();\n\n                  case 10:\n                    _context.t2 = _context.sent;\n\n                  case 11:\n                    _context.t1 = _context.t2;\n\n                    if (_context.t1) {\n                      _context.next = 16;\n                      break;\n                    }\n\n                    _context.next = 15;\n                    return _this.getGCEProjectId();\n\n                  case 15:\n                    _context.t1 = _context.sent;\n\n                  case 16:\n                    _context.t0 = _context.t1;\n\n                    if (_context.t0) {\n                      _context.next = 21;\n                      break;\n                    }\n\n                    _context.next = 20;\n                    return _this.getExternalAccountClientProjectId();\n\n                  case 20:\n                    _context.t0 = _context.sent;\n\n                  case 21:\n                    projectId = _context.t0;\n                    _this._cachedProjectId = projectId;\n\n                    if (projectId) {\n                      _context.next = 25;\n                      break;\n                    }\n\n                    throw new Error('Unable to detect a Project Id in the current environment. \\n' + 'To learn more about authentication and Google APIs, visit: \\n' + 'https://cloud.google.com/docs/authentication/getting-started');\n\n                  case 25:\n                    resolve(projectId);\n                    _context.next = 31;\n                    break;\n\n                  case 28:\n                    _context.prev = 28;\n                    _context.t4 = _context[\"catch\"](0);\n                    reject(_context.t4);\n\n                  case 31:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[0, 28]]);\n          }));\n\n          return function (_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      }\n\n      return this._getDefaultProjectIdPromise;\n    }\n    /**\n     * @returns Any scopes (user-specified or default scopes specified by the\n     *   client library) that need to be set on the current Auth client.\n     */\n\n  }, {\n    key: \"getAnyScopes\",\n    value: function getAnyScopes() {\n      return this.scopes || this.defaultScopes;\n    }\n  }, {\n    key: \"getApplicationDefault\",\n    value: function getApplicationDefault() {\n      var optionsOrCallback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments.length > 1 ? arguments[1] : undefined;\n      var options;\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n      } else {\n        options = optionsOrCallback;\n      }\n\n      if (callback) {\n        this.getApplicationDefaultAsync(options).then(function (r) {\n          return callback(null, r.credential, r.projectId);\n        }, callback);\n      } else {\n        return this.getApplicationDefaultAsync(options);\n      }\n    }\n  }, {\n    key: \"getApplicationDefaultAsync\",\n    value: function () {\n      var _getApplicationDefaultAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var options,\n            credential,\n            projectId,\n            isGCE,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n\n                if (!this.cachedCredential) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.t0 = this.cachedCredential;\n                _context2.next = 5;\n                return this.getProjectIdAsync();\n\n              case 5:\n                _context2.t1 = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  credential: _context2.t0,\n                  projectId: _context2.t1\n                });\n\n              case 7:\n                _context2.next = 9;\n                return this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n\n              case 9:\n                credential = _context2.sent;\n\n                if (!credential) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                if (credential instanceof jwtclient_1.JWT) {\n                  credential.scopes = this.scopes;\n                } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                  credential.scopes = this.getAnyScopes();\n                }\n\n                this.cachedCredential = credential;\n                _context2.next = 15;\n                return this.getProjectId();\n\n              case 15:\n                projectId = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  credential: credential,\n                  projectId: projectId\n                });\n\n              case 17:\n                _context2.next = 19;\n                return this._tryGetApplicationCredentialsFromWellKnownFile(options);\n\n              case 19:\n                credential = _context2.sent;\n\n                if (!credential) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                if (credential instanceof jwtclient_1.JWT) {\n                  credential.scopes = this.scopes;\n                } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                  credential.scopes = this.getAnyScopes();\n                }\n\n                this.cachedCredential = credential;\n                _context2.next = 25;\n                return this.getProjectId();\n\n              case 25:\n                projectId = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  credential: credential,\n                  projectId: projectId\n                });\n\n              case 27:\n                _context2.prev = 27;\n                _context2.next = 30;\n                return this._checkIsGCE();\n\n              case 30:\n                isGCE = _context2.sent;\n                _context2.next = 37;\n                break;\n\n              case 33:\n                _context2.prev = 33;\n                _context2.t2 = _context2[\"catch\"](27);\n                _context2.t2.message = \"Unexpected error determining execution environment: \".concat(_context2.t2.message);\n                throw _context2.t2;\n\n              case 37:\n                if (isGCE) {\n                  _context2.next = 39;\n                  break;\n                }\n\n                throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n\n              case 39:\n                // For GCE, just return a default ComputeClient. It will take care of\n                // the rest.\n                options.scopes = this.getAnyScopes();\n                this.cachedCredential = new computeclient_1.Compute(options);\n                _context2.next = 43;\n                return this.getProjectId();\n\n              case 43:\n                projectId = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  projectId: projectId,\n                  credential: this.cachedCredential\n                });\n\n              case 45:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[27, 33]]);\n      }));\n\n      function getApplicationDefaultAsync() {\n        return _getApplicationDefaultAsync.apply(this, arguments);\n      }\n\n      return getApplicationDefaultAsync;\n    }()\n    /**\n     * Determines whether the auth layer is running on Google Compute Engine.\n     * @returns A promise that resolves with the boolean.\n     * @api private\n     */\n\n  }, {\n    key: \"_checkIsGCE\",\n    value: function () {\n      var _checkIsGCE2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this.checkIsGCE === undefined)) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                _context3.next = 3;\n                return gcpMetadata.isAvailable();\n\n              case 3:\n                this.checkIsGCE = _context3.sent;\n\n              case 4:\n                return _context3.abrupt(\"return\", this.checkIsGCE);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _checkIsGCE() {\n        return _checkIsGCE2.apply(this, arguments);\n      }\n\n      return _checkIsGCE;\n    }()\n    /**\n     * Attempts to load default credentials from the environment variable path..\n     * @returns Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n\n  }, {\n    key: \"_tryGetApplicationCredentialsFromEnvironmentVariable\",\n    value: function () {\n      var _tryGetApplicationCredentialsFromEnvironmentVariable2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(options) {\n        var credentialsPath;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] || process.env['google_application_credentials'];\n\n                if (!(!credentialsPath || credentialsPath.length === 0)) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 3:\n                _context4.prev = 3;\n                return _context4.abrupt(\"return\", this._getApplicationCredentialsFromFilePath(credentialsPath, options));\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](3);\n                _context4.t0.message = \"Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: \".concat(_context4.t0.message);\n                throw _context4.t0;\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[3, 7]]);\n      }));\n\n      function _tryGetApplicationCredentialsFromEnvironmentVariable(_x3) {\n        return _tryGetApplicationCredentialsFromEnvironmentVariable2.apply(this, arguments);\n      }\n\n      return _tryGetApplicationCredentialsFromEnvironmentVariable;\n    }()\n    /**\n     * Attempts to load default credentials from a well-known file location\n     * @return Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n\n  }, {\n    key: \"_tryGetApplicationCredentialsFromWellKnownFile\",\n    value: function () {\n      var _tryGetApplicationCredentialsFromWellKnownFile2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(options) {\n        var location, home, client;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                // First, figure out the location of the file, depending upon the OS type.\n                location = null;\n\n                if (this._isWindows()) {\n                  // Windows\n                  location = process.env['APPDATA'];\n                } else {\n                  // Linux or Mac\n                  home = process.env['HOME'];\n\n                  if (home) {\n                    location = path.join(home, '.config');\n                  }\n                } // If we found the root path, expand it.\n\n\n                if (location) {\n                  location = path.join(location, 'gcloud', 'application_default_credentials.json');\n\n                  if (!fs.existsSync(location)) {\n                    location = null;\n                  }\n                } // The file does not exist.\n\n\n                if (location) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", null);\n\n              case 5:\n                _context5.next = 7;\n                return this._getApplicationCredentialsFromFilePath(location, options);\n\n              case 7:\n                client = _context5.sent;\n                return _context5.abrupt(\"return\", client);\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _tryGetApplicationCredentialsFromWellKnownFile(_x4) {\n        return _tryGetApplicationCredentialsFromWellKnownFile2.apply(this, arguments);\n      }\n\n      return _tryGetApplicationCredentialsFromWellKnownFile;\n    }()\n    /**\n     * Attempts to load default credentials from a file at the given path..\n     * @param filePath The path to the file to read.\n     * @returns Promise that resolves with the OAuth2Client\n     * @api private\n     */\n\n  }, {\n    key: \"_getApplicationCredentialsFromFilePath\",\n    value: function () {\n      var _getApplicationCredentialsFromFilePath2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(filePath) {\n        var options,\n            readStream,\n            _args6 = arguments;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                options = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n\n                if (!(!filePath || filePath.length === 0)) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                throw new Error('The file path is invalid.');\n\n              case 3:\n                _context6.prev = 3;\n                // Resolve path to actual file in case of symlink. Expect a thrown error\n                // if not resolvable.\n                filePath = fs.realpathSync(filePath);\n\n                if (fs.lstatSync(filePath).isFile()) {\n                  _context6.next = 7;\n                  break;\n                }\n\n                throw new Error();\n\n              case 7:\n                _context6.next = 13;\n                break;\n\n              case 9:\n                _context6.prev = 9;\n                _context6.t0 = _context6[\"catch\"](3);\n                _context6.t0.message = \"The file at \".concat(filePath, \" does not exist, or it is not a file. \").concat(_context6.t0.message);\n                throw _context6.t0;\n\n              case 13:\n                // Now open a read stream on the file, and parse it.\n                readStream = fs.createReadStream(filePath);\n                return _context6.abrupt(\"return\", this.fromStream(readStream, options));\n\n              case 15:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[3, 9]]);\n      }));\n\n      function _getApplicationCredentialsFromFilePath(_x5) {\n        return _getApplicationCredentialsFromFilePath2.apply(this, arguments);\n      }\n\n      return _getApplicationCredentialsFromFilePath;\n    }()\n    /**\n     * Create a credentials instance using the given input options.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json, options) {\n      var client;\n\n      if (!json) {\n        throw new Error('Must pass in a JSON object containing the Google auth settings.');\n      }\n\n      options = options || {};\n\n      if (json.type === 'authorized_user') {\n        client = new refreshclient_1.UserRefreshClient(options);\n        client.fromJSON(json);\n      } else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n        client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n        client.scopes = this.getAnyScopes();\n      } else {\n        options.scopes = this.scopes;\n        client = new jwtclient_1.JWT(options);\n        this.setGapicJWTValues(client);\n        client.fromJSON(json);\n      }\n\n      return client;\n    }\n    /**\n     * Return a JWT or UserRefreshClient from JavaScript object, caching both the\n     * object used to instantiate and the client.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n\n  }, {\n    key: \"_cacheClientFromJSON\",\n    value: function _cacheClientFromJSON(json, options) {\n      var client; // create either a UserRefreshClient or JWT client.\n\n      options = options || {};\n\n      if (json.type === 'authorized_user') {\n        client = new refreshclient_1.UserRefreshClient(options);\n        client.fromJSON(json);\n      } else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n        client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n        client.scopes = this.getAnyScopes();\n      } else {\n        options.scopes = this.scopes;\n        client = new jwtclient_1.JWT(options);\n        this.setGapicJWTValues(client);\n        client.fromJSON(json);\n      } // cache both raw data used to instantiate client and client itself.\n\n\n      this.jsonContent = json;\n      this.cachedCredential = client;\n      return this.cachedCredential;\n    }\n  }, {\n    key: \"fromStream\",\n    value: function fromStream(inputStream) {\n      var optionsOrCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments.length > 2 ? arguments[2] : undefined;\n      var options = {};\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n      } else {\n        options = optionsOrCallback;\n      }\n\n      if (callback) {\n        this.fromStreamAsync(inputStream, options).then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.fromStreamAsync(inputStream, options);\n      }\n    }\n  }, {\n    key: \"fromStreamAsync\",\n    value: function fromStreamAsync(inputStream, options) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!inputStream) {\n          throw new Error('Must pass in a stream containing the Google auth settings.');\n        }\n\n        var s = '';\n        inputStream.setEncoding('utf8').on('error', reject).on('data', function (chunk) {\n          return s += chunk;\n        }).on('end', function () {\n          try {\n            try {\n              var data = JSON.parse(s);\n\n              var r = _this2._cacheClientFromJSON(data, options);\n\n              return resolve(r);\n            } catch (err) {\n              // If we failed parsing this.keyFileName, assume that it\n              // is a PEM or p12 certificate:\n              if (!_this2.keyFilename) throw err;\n              var client = new jwtclient_1.JWT(_objectSpread(_objectSpread({}, _this2.clientOptions), {}, {\n                keyFile: _this2.keyFilename\n              }));\n              _this2.cachedCredential = client;\n\n              _this2.setGapicJWTValues(client);\n\n              return resolve(client);\n            }\n          } catch (err) {\n            return reject(err);\n          }\n        });\n      });\n    }\n    /**\n     * Create a credentials instance using the given API key string.\n     * @param apiKey The API key string\n     * @param options An optional options object.\n     * @returns A JWT loaded from the key\n     */\n\n  }, {\n    key: \"fromAPIKey\",\n    value: function fromAPIKey(apiKey, options) {\n      options = options || {};\n      var client = new jwtclient_1.JWT(options);\n      client.fromAPIKey(apiKey);\n      return client;\n    }\n    /**\n     * Determines whether the current operating system is Windows.\n     * @api private\n     */\n\n  }, {\n    key: \"_isWindows\",\n    value: function _isWindows() {\n      var sys = os.platform();\n\n      if (sys && sys.length >= 3) {\n        if (sys.substring(0, 3).toLowerCase() === 'win') {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Run the Google Cloud SDK command that prints the default project ID\n     */\n\n  }, {\n    key: \"getDefaultServiceProjectId\",\n    value: function () {\n      var _getDefaultServiceProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", new Promise(function (resolve) {\n                  child_process_1.exec('gcloud config config-helper --format json', function (err, stdout) {\n                    if (!err && stdout) {\n                      try {\n                        var projectId = JSON.parse(stdout).configuration.properties.core.project;\n                        resolve(projectId);\n                        return;\n                      } catch (e) {// ignore errors\n                      }\n                    }\n\n                    resolve(null);\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function getDefaultServiceProjectId() {\n        return _getDefaultServiceProjectId.apply(this, arguments);\n      }\n\n      return getDefaultServiceProjectId;\n    }()\n    /**\n     * Loads the project id from environment variables.\n     * @api private\n     */\n\n  }, {\n    key: \"getProductionProjectId\",\n    value: function getProductionProjectId() {\n      return process.env['GCLOUD_PROJECT'] || process.env['GOOGLE_CLOUD_PROJECT'] || process.env['gcloud_project'] || process.env['google_cloud_project'];\n    }\n    /**\n     * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n     * @api private\n     */\n\n  }, {\n    key: \"getFileProjectId\",\n    value: function () {\n      var _getFileProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var creds, r;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!this.cachedCredential) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", this.cachedCredential.projectId);\n\n              case 2:\n                if (!this.keyFilename) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                _context8.next = 5;\n                return this.getClient();\n\n              case 5:\n                creds = _context8.sent;\n\n                if (!(creds && creds.projectId)) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", creds.projectId);\n\n              case 8:\n                _context8.next = 10;\n                return this._tryGetApplicationCredentialsFromEnvironmentVariable();\n\n              case 10:\n                r = _context8.sent;\n\n                if (!r) {\n                  _context8.next = 15;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", r.projectId);\n\n              case 15:\n                return _context8.abrupt(\"return\", null);\n\n              case 16:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getFileProjectId() {\n        return _getFileProjectId.apply(this, arguments);\n      }\n\n      return getFileProjectId;\n    }()\n    /**\n     * Gets the project ID from external account client if available.\n     */\n\n  }, {\n    key: \"getExternalAccountClientProjectId\",\n    value: function () {\n      var _getExternalAccountClientProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var creds;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(!this.jsonContent || this.jsonContent.type !== baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE)) {\n                  _context9.next = 2;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", null);\n\n              case 2:\n                _context9.next = 4;\n                return this.getClient();\n\n              case 4:\n                creds = _context9.sent;\n                _context9.next = 7;\n                return creds.getProjectId();\n\n              case 7:\n                return _context9.abrupt(\"return\", _context9.sent);\n\n              case 8:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getExternalAccountClientProjectId() {\n        return _getExternalAccountClientProjectId.apply(this, arguments);\n      }\n\n      return getExternalAccountClientProjectId;\n    }()\n    /**\n     * Gets the Compute Engine project ID if it can be inferred.\n     */\n\n  }, {\n    key: \"getGCEProjectId\",\n    value: function () {\n      var _getGCEProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var r;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n                _context10.next = 3;\n                return gcpMetadata.project('project-id');\n\n              case 3:\n                r = _context10.sent;\n                return _context10.abrupt(\"return\", r);\n\n              case 7:\n                _context10.prev = 7;\n                _context10.t0 = _context10[\"catch\"](0);\n                return _context10.abrupt(\"return\", null);\n\n              case 10:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, null, [[0, 7]]);\n      }));\n\n      function getGCEProjectId() {\n        return _getGCEProjectId.apply(this, arguments);\n      }\n\n      return getGCEProjectId;\n    }()\n  }, {\n    key: \"getCredentials\",\n    value: function getCredentials(callback) {\n      if (callback) {\n        this.getCredentialsAsync().then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.getCredentialsAsync();\n      }\n    }\n  }, {\n    key: \"getCredentialsAsync\",\n    value: function () {\n      var _getCredentialsAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var credential, isGCE, data;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.getClient();\n\n              case 2:\n                if (!this.jsonContent) {\n                  _context11.next = 5;\n                  break;\n                }\n\n                credential = {\n                  client_email: this.jsonContent.client_email,\n                  private_key: this.jsonContent.private_key\n                };\n                return _context11.abrupt(\"return\", credential);\n\n              case 5:\n                _context11.next = 7;\n                return this._checkIsGCE();\n\n              case 7:\n                isGCE = _context11.sent;\n\n                if (isGCE) {\n                  _context11.next = 10;\n                  break;\n                }\n\n                throw new Error('Unknown error.');\n\n              case 10:\n                _context11.next = 12;\n                return gcpMetadata.instance({\n                  property: 'service-accounts/',\n                  params: {\n                    recursive: 'true'\n                  }\n                });\n\n              case 12:\n                data = _context11.sent;\n\n                if (!(!data || !data.default || !data.default.email)) {\n                  _context11.next = 15;\n                  break;\n                }\n\n                throw new Error('Failure from metadata server.');\n\n              case 15:\n                return _context11.abrupt(\"return\", {\n                  client_email: data.default.email\n                });\n\n              case 16:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getCredentialsAsync() {\n        return _getCredentialsAsync.apply(this, arguments);\n      }\n\n      return getCredentialsAsync;\n    }()\n    /**\n     * Automatically obtain a client based on the provided configuration.  If no\n     * options were passed, use Application Default Credentials.\n     */\n\n  }, {\n    key: \"getClient\",\n    value: function () {\n      var _getClient = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(options) {\n        var filePath, stream;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (!options) {\n                  _context12.next = 2;\n                  break;\n                }\n\n                throw new Error('Passing options to getClient is forbidden in v5.0.0. Use new GoogleAuth(opts) instead.');\n\n              case 2:\n                if (this.cachedCredential) {\n                  _context12.next = 16;\n                  break;\n                }\n\n                if (!this.jsonContent) {\n                  _context12.next = 7;\n                  break;\n                }\n\n                this._cacheClientFromJSON(this.jsonContent, this.clientOptions);\n\n                _context12.next = 16;\n                break;\n\n              case 7:\n                if (!this.keyFilename) {\n                  _context12.next = 14;\n                  break;\n                }\n\n                filePath = path.resolve(this.keyFilename);\n                stream = fs.createReadStream(filePath);\n                _context12.next = 12;\n                return this.fromStreamAsync(stream, this.clientOptions);\n\n              case 12:\n                _context12.next = 16;\n                break;\n\n              case 14:\n                _context12.next = 16;\n                return this.getApplicationDefaultAsync(this.clientOptions);\n\n              case 16:\n                return _context12.abrupt(\"return\", this.cachedCredential);\n\n              case 17:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getClient(_x6) {\n        return _getClient.apply(this, arguments);\n      }\n\n      return getClient;\n    }()\n    /**\n     * Creates a client which will fetch an ID token for authorization.\n     * @param targetAudience the audience for the fetched ID token.\n     * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\n     */\n\n  }, {\n    key: \"getIdTokenClient\",\n    value: function () {\n      var _getIdTokenClient = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(targetAudience) {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context13.sent;\n\n                if ('fetchIdToken' in client) {\n                  _context13.next = 5;\n                  break;\n                }\n\n                throw new Error('Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.');\n\n              case 5:\n                return _context13.abrupt(\"return\", new idtokenclient_1.IdTokenClient({\n                  targetAudience: targetAudience,\n                  idTokenProvider: client\n                }));\n\n              case 6:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getIdTokenClient(_x7) {\n        return _getIdTokenClient.apply(this, arguments);\n      }\n\n      return getIdTokenClient;\n    }()\n    /**\n     * Automatically obtain application default credentials, and return\n     * an access token for making requests.\n     */\n\n  }, {\n    key: \"getAccessToken\",\n    value: function () {\n      var _getAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context14.sent;\n                _context14.next = 5;\n                return client.getAccessToken();\n\n              case 5:\n                return _context14.abrupt(\"return\", _context14.sent.token);\n\n              case 6:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getAccessToken() {\n        return _getAccessToken.apply(this, arguments);\n      }\n\n      return getAccessToken;\n    }()\n    /**\n     * Obtain the HTTP headers that will provide authorization for a given\n     * request.\n     */\n\n  }, {\n    key: \"getRequestHeaders\",\n    value: function () {\n      var _getRequestHeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(url) {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context15.sent;\n                return _context15.abrupt(\"return\", client.getRequestHeaders(url));\n\n              case 4:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function getRequestHeaders(_x8) {\n        return _getRequestHeaders.apply(this, arguments);\n      }\n\n      return getRequestHeaders;\n    }()\n    /**\n     * Obtain credentials for a request, then attach the appropriate headers to\n     * the request options.\n     * @param opts Axios or Request options on which to attach the headers\n     */\n\n  }, {\n    key: \"authorizeRequest\",\n    value: function () {\n      var _authorizeRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(opts) {\n        var url, client, headers;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                opts = opts || {};\n                url = opts.url || opts.uri;\n                _context16.next = 4;\n                return this.getClient();\n\n              case 4:\n                client = _context16.sent;\n                _context16.next = 7;\n                return client.getRequestHeaders(url);\n\n              case 7:\n                headers = _context16.sent;\n                opts.headers = Object.assign(opts.headers || {}, headers);\n                return _context16.abrupt(\"return\", opts);\n\n              case 10:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function authorizeRequest(_x9) {\n        return _authorizeRequest.apply(this, arguments);\n      }\n\n      return authorizeRequest;\n    }()\n    /**\n     * Automatically obtain application default credentials, and make an\n     * HTTP request using the given options.\n     * @param opts Axios request options for the HTTP request.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  }, {\n    key: \"request\",\n    value: function () {\n      var _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(opts) {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context17.sent;\n                return _context17.abrupt(\"return\", client.request(opts));\n\n              case 4:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function request(_x10) {\n        return _request.apply(this, arguments);\n      }\n\n      return request;\n    }()\n    /**\n     * Determine the compute environment in which the code is running.\n     */\n\n  }, {\n    key: \"getEnv\",\n    value: function getEnv() {\n      return envDetect_1.getEnv();\n    }\n    /**\n     * Sign the given data with the current private key, or go out\n     * to the IAM API to sign it.\n     * @param data The data to be signed.\n     */\n\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(data) {\n        var client, crypto, _sign2, projectId, creds;\n\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context18.sent;\n                crypto = crypto_1.createCrypto();\n\n                if (!(client instanceof jwtclient_1.JWT && client.key)) {\n                  _context18.next = 9;\n                  break;\n                }\n\n                _context18.next = 7;\n                return crypto.sign(client.key, data);\n\n              case 7:\n                _sign2 = _context18.sent;\n                return _context18.abrupt(\"return\", _sign2);\n\n              case 9:\n                if (!(client instanceof baseexternalclient_1.BaseExternalAccountClient && client.getServiceAccountEmail())) {\n                  _context18.next = 11;\n                  break;\n                }\n\n                return _context18.abrupt(\"return\", this.signBlob(crypto, client.getServiceAccountEmail(), data));\n\n              case 11:\n                _context18.next = 13;\n                return this.getProjectId();\n\n              case 13:\n                projectId = _context18.sent;\n\n                if (projectId) {\n                  _context18.next = 16;\n                  break;\n                }\n\n                throw new Error('Cannot sign data without a project ID.');\n\n              case 16:\n                _context18.next = 18;\n                return this.getCredentials();\n\n              case 18:\n                creds = _context18.sent;\n\n                if (creds.client_email) {\n                  _context18.next = 21;\n                  break;\n                }\n\n                throw new Error('Cannot sign data without `client_email`.');\n\n              case 21:\n                return _context18.abrupt(\"return\", this.signBlob(crypto, creds.client_email, data));\n\n              case 22:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function sign(_x11) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }, {\n    key: \"signBlob\",\n    value: function () {\n      var _signBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(crypto, emailOrUniqueId, data) {\n        var url, res;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                url = 'https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/' + \"\".concat(emailOrUniqueId, \":signBlob\");\n                _context19.next = 3;\n                return this.request({\n                  method: 'POST',\n                  url: url,\n                  data: {\n                    payload: crypto.encodeBase64StringUtf8(data)\n                  }\n                });\n\n              case 3:\n                res = _context19.sent;\n                return _context19.abrupt(\"return\", res.data.signedBlob);\n\n              case 5:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function signBlob(_x12, _x13, _x14) {\n        return _signBlob.apply(this, arguments);\n      }\n\n      return signBlob;\n    }()\n  }]);\n\n  return GoogleAuth;\n}();\n\nexports.GoogleAuth = GoogleAuth;\n/**\n * Export DefaultTransporter as a static property of the class.\n */\n\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;","map":{"version":3,"sources":["/workspaces/MLH-hackathon-project/frontend/node_modules/google-auth-library/build/src/auth/googleauth.js"],"names":["Object","defineProperty","exports","value","GoogleAuth","CLOUD_SDK_CLIENT_ID","child_process_1","require","fs","gcpMetadata","os","path","crypto_1","transporters_1","computeclient_1","idtokenclient_1","envDetect_1","jwtclient_1","refreshclient_1","externalclient_1","baseexternalclient_1","opts","checkIsGCE","undefined","jsonContent","cachedCredential","_cachedProjectId","projectId","keyFilename","keyFile","scopes","credentials","clientOptions","client","defaultServicePath","useJWTAccessWithScope","defaultScopes","callback","getProjectIdAsync","then","r","Promise","resolve","_getDefaultProjectIdPromise","reject","getProductionProjectId","getFileProjectId","getDefaultServiceProjectId","getGCEProjectId","getExternalAccountClientProjectId","Error","optionsOrCallback","options","getApplicationDefaultAsync","credential","_tryGetApplicationCredentialsFromEnvironmentVariable","JWT","BaseExternalAccountClient","getAnyScopes","getProjectId","_tryGetApplicationCredentialsFromWellKnownFile","_checkIsGCE","isGCE","message","Compute","isAvailable","credentialsPath","process","env","length","_getApplicationCredentialsFromFilePath","location","_isWindows","home","join","existsSync","filePath","realpathSync","lstatSync","isFile","readStream","createReadStream","fromStream","json","type","UserRefreshClient","fromJSON","EXTERNAL_ACCOUNT_TYPE","ExternalAccountClient","setGapicJWTValues","inputStream","fromStreamAsync","s","setEncoding","on","chunk","data","JSON","parse","_cacheClientFromJSON","err","apiKey","fromAPIKey","sys","platform","substring","toLowerCase","exec","stdout","configuration","properties","core","project","e","getClient","creds","getCredentialsAsync","client_email","private_key","instance","property","params","recursive","default","email","stream","targetAudience","IdTokenClient","idTokenProvider","getAccessToken","token","url","getRequestHeaders","uri","headers","assign","request","getEnv","crypto","createCrypto","key","sign","getServiceAccountEmail","signBlob","getCredentials","emailOrUniqueId","method","payload","encodeBase64StringUtf8","res","signedBlob","DefaultTransporter"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GoogleAuth = exports.CLOUD_SDK_CLIENT_ID = void 0;\nconst child_process_1 = require(\"child_process\");\nconst fs = require(\"fs\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst transporters_1 = require(\"../transporters\");\nconst computeclient_1 = require(\"./computeclient\");\nconst idtokenclient_1 = require(\"./idtokenclient\");\nconst envDetect_1 = require(\"./envDetect\");\nconst jwtclient_1 = require(\"./jwtclient\");\nconst refreshclient_1 = require(\"./refreshclient\");\nconst externalclient_1 = require(\"./externalclient\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\nclass GoogleAuth {\n    constructor(opts) {\n        /**\n         * Caches a value indicating whether the auth layer is running on Google\n         * Compute Engine.\n         * @private\n         */\n        this.checkIsGCE = undefined;\n        // To save the contents of the JSON credential file\n        this.jsonContent = null;\n        this.cachedCredential = null;\n        opts = opts || {};\n        this._cachedProjectId = opts.projectId || null;\n        this.keyFilename = opts.keyFilename || opts.keyFile;\n        this.scopes = opts.scopes;\n        this.jsonContent = opts.credentials || null;\n        this.clientOptions = opts.clientOptions;\n    }\n    // Note:  this properly is only public to satisify unit tests.\n    // https://github.com/Microsoft/TypeScript/issues/5228\n    get isGCE() {\n        return this.checkIsGCE;\n    }\n    // GAPIC client libraries should always use self-signed JWTs. The following\n    // variables are set on the JWT client in order to indicate the type of library,\n    // and sign the JWT with the correct audience and scopes (if not supplied).\n    setGapicJWTValues(client) {\n        client.defaultServicePath = this.defaultServicePath;\n        client.useJWTAccessWithScope = this.useJWTAccessWithScope;\n        client.defaultScopes = this.defaultScopes;\n    }\n    getProjectId(callback) {\n        if (callback) {\n            this.getProjectIdAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getProjectIdAsync();\n        }\n    }\n    getProjectIdAsync() {\n        if (this._cachedProjectId) {\n            return Promise.resolve(this._cachedProjectId);\n        }\n        // In implicit case, supports three environments. In order of precedence,\n        // the implicit environments are:\n        // - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n        // - GOOGLE_APPLICATION_CREDENTIALS JSON file\n        // - Cloud SDK: `gcloud config config-helper --format json`\n        // - GCE project ID from metadata server)\n        if (!this._getDefaultProjectIdPromise) {\n            // TODO: refactor the below code so that it doesn't mix and match\n            // promises and async/await.\n            this._getDefaultProjectIdPromise = new Promise(\n            // eslint-disable-next-line no-async-promise-executor\n            async (resolve, reject) => {\n                try {\n                    const projectId = this.getProductionProjectId() ||\n                        (await this.getFileProjectId()) ||\n                        (await this.getDefaultServiceProjectId()) ||\n                        (await this.getGCEProjectId()) ||\n                        (await this.getExternalAccountClientProjectId());\n                    this._cachedProjectId = projectId;\n                    if (!projectId) {\n                        throw new Error('Unable to detect a Project Id in the current environment. \\n' +\n                            'To learn more about authentication and Google APIs, visit: \\n' +\n                            'https://cloud.google.com/docs/authentication/getting-started');\n                    }\n                    resolve(projectId);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        }\n        return this._getDefaultProjectIdPromise;\n    }\n    /**\n     * @returns Any scopes (user-specified or default scopes specified by the\n     *   client library) that need to be set on the current Auth client.\n     */\n    getAnyScopes() {\n        return this.scopes || this.defaultScopes;\n    }\n    getApplicationDefault(optionsOrCallback = {}, callback) {\n        let options;\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.getApplicationDefaultAsync(options).then(r => callback(null, r.credential, r.projectId), callback);\n        }\n        else {\n            return this.getApplicationDefaultAsync(options);\n        }\n    }\n    async getApplicationDefaultAsync(options = {}) {\n        // If we've already got a cached credential, just return it.\n        if (this.cachedCredential) {\n            return {\n                credential: this.cachedCredential,\n                projectId: await this.getProjectIdAsync(),\n            };\n        }\n        let credential;\n        let projectId;\n        // Check for the existence of a local environment variable pointing to the\n        // location of the credential file. This is typically used in local\n        // developer scenarios.\n        credential =\n            await this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.scopes = this.scopes;\n            }\n            else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                credential.scopes = this.getAnyScopes();\n            }\n            this.cachedCredential = credential;\n            projectId = await this.getProjectId();\n            return { credential, projectId };\n        }\n        // Look in the well-known credential file location.\n        credential = await this._tryGetApplicationCredentialsFromWellKnownFile(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.scopes = this.scopes;\n            }\n            else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                credential.scopes = this.getAnyScopes();\n            }\n            this.cachedCredential = credential;\n            projectId = await this.getProjectId();\n            return { credential, projectId };\n        }\n        // Determine if we're running on GCE.\n        let isGCE;\n        try {\n            isGCE = await this._checkIsGCE();\n        }\n        catch (e) {\n            e.message = `Unexpected error determining execution environment: ${e.message}`;\n            throw e;\n        }\n        if (!isGCE) {\n            // We failed to find the default credentials. Bail out with an error.\n            throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n        }\n        // For GCE, just return a default ComputeClient. It will take care of\n        // the rest.\n        options.scopes = this.getAnyScopes();\n        this.cachedCredential = new computeclient_1.Compute(options);\n        projectId = await this.getProjectId();\n        return { projectId, credential: this.cachedCredential };\n    }\n    /**\n     * Determines whether the auth layer is running on Google Compute Engine.\n     * @returns A promise that resolves with the boolean.\n     * @api private\n     */\n    async _checkIsGCE() {\n        if (this.checkIsGCE === undefined) {\n            this.checkIsGCE = await gcpMetadata.isAvailable();\n        }\n        return this.checkIsGCE;\n    }\n    /**\n     * Attempts to load default credentials from the environment variable path..\n     * @returns Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    async _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n        const credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] ||\n            process.env['google_application_credentials'];\n        if (!credentialsPath || credentialsPath.length === 0) {\n            return null;\n        }\n        try {\n            return this._getApplicationCredentialsFromFilePath(credentialsPath, options);\n        }\n        catch (e) {\n            e.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e.message}`;\n            throw e;\n        }\n    }\n    /**\n     * Attempts to load default credentials from a well-known file location\n     * @return Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    async _tryGetApplicationCredentialsFromWellKnownFile(options) {\n        // First, figure out the location of the file, depending upon the OS type.\n        let location = null;\n        if (this._isWindows()) {\n            // Windows\n            location = process.env['APPDATA'];\n        }\n        else {\n            // Linux or Mac\n            const home = process.env['HOME'];\n            if (home) {\n                location = path.join(home, '.config');\n            }\n        }\n        // If we found the root path, expand it.\n        if (location) {\n            location = path.join(location, 'gcloud', 'application_default_credentials.json');\n            if (!fs.existsSync(location)) {\n                location = null;\n            }\n        }\n        // The file does not exist.\n        if (!location) {\n            return null;\n        }\n        // The file seems to exist. Try to use it.\n        const client = await this._getApplicationCredentialsFromFilePath(location, options);\n        return client;\n    }\n    /**\n     * Attempts to load default credentials from a file at the given path..\n     * @param filePath The path to the file to read.\n     * @returns Promise that resolves with the OAuth2Client\n     * @api private\n     */\n    async _getApplicationCredentialsFromFilePath(filePath, options = {}) {\n        // Make sure the path looks like a string.\n        if (!filePath || filePath.length === 0) {\n            throw new Error('The file path is invalid.');\n        }\n        // Make sure there is a file at the path. lstatSync will throw if there is\n        // nothing there.\n        try {\n            // Resolve path to actual file in case of symlink. Expect a thrown error\n            // if not resolvable.\n            filePath = fs.realpathSync(filePath);\n            if (!fs.lstatSync(filePath).isFile()) {\n                throw new Error();\n            }\n        }\n        catch (err) {\n            err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\n            throw err;\n        }\n        // Now open a read stream on the file, and parse it.\n        const readStream = fs.createReadStream(filePath);\n        return this.fromStream(readStream, options);\n    }\n    /**\n     * Create a credentials instance using the given input options.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n    fromJSON(json, options) {\n        let client;\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the Google auth settings.');\n        }\n        options = options || {};\n        if (json.type === 'authorized_user') {\n            client = new refreshclient_1.UserRefreshClient(options);\n            client.fromJSON(json);\n        }\n        else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n            client.scopes = this.getAnyScopes();\n        }\n        else {\n            options.scopes = this.scopes;\n            client = new jwtclient_1.JWT(options);\n            this.setGapicJWTValues(client);\n            client.fromJSON(json);\n        }\n        return client;\n    }\n    /**\n     * Return a JWT or UserRefreshClient from JavaScript object, caching both the\n     * object used to instantiate and the client.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n    _cacheClientFromJSON(json, options) {\n        let client;\n        // create either a UserRefreshClient or JWT client.\n        options = options || {};\n        if (json.type === 'authorized_user') {\n            client = new refreshclient_1.UserRefreshClient(options);\n            client.fromJSON(json);\n        }\n        else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n            client.scopes = this.getAnyScopes();\n        }\n        else {\n            options.scopes = this.scopes;\n            client = new jwtclient_1.JWT(options);\n            this.setGapicJWTValues(client);\n            client.fromJSON(json);\n        }\n        // cache both raw data used to instantiate client and client itself.\n        this.jsonContent = json;\n        this.cachedCredential = client;\n        return this.cachedCredential;\n    }\n    fromStream(inputStream, optionsOrCallback = {}, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.fromStreamAsync(inputStream, options).then(r => callback(null, r), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream, options);\n        }\n    }\n    fromStreamAsync(inputStream, options) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the Google auth settings.');\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => (s += chunk))\n                .on('end', () => {\n                try {\n                    try {\n                        const data = JSON.parse(s);\n                        const r = this._cacheClientFromJSON(data, options);\n                        return resolve(r);\n                    }\n                    catch (err) {\n                        // If we failed parsing this.keyFileName, assume that it\n                        // is a PEM or p12 certificate:\n                        if (!this.keyFilename)\n                            throw err;\n                        const client = new jwtclient_1.JWT({\n                            ...this.clientOptions,\n                            keyFile: this.keyFilename,\n                        });\n                        this.cachedCredential = client;\n                        this.setGapicJWTValues(client);\n                        return resolve(client);\n                    }\n                }\n                catch (err) {\n                    return reject(err);\n                }\n            });\n        });\n    }\n    /**\n     * Create a credentials instance using the given API key string.\n     * @param apiKey The API key string\n     * @param options An optional options object.\n     * @returns A JWT loaded from the key\n     */\n    fromAPIKey(apiKey, options) {\n        options = options || {};\n        const client = new jwtclient_1.JWT(options);\n        client.fromAPIKey(apiKey);\n        return client;\n    }\n    /**\n     * Determines whether the current operating system is Windows.\n     * @api private\n     */\n    _isWindows() {\n        const sys = os.platform();\n        if (sys && sys.length >= 3) {\n            if (sys.substring(0, 3).toLowerCase() === 'win') {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Run the Google Cloud SDK command that prints the default project ID\n     */\n    async getDefaultServiceProjectId() {\n        return new Promise(resolve => {\n            child_process_1.exec('gcloud config config-helper --format json', (err, stdout) => {\n                if (!err && stdout) {\n                    try {\n                        const projectId = JSON.parse(stdout).configuration.properties.core.project;\n                        resolve(projectId);\n                        return;\n                    }\n                    catch (e) {\n                        // ignore errors\n                    }\n                }\n                resolve(null);\n            });\n        });\n    }\n    /**\n     * Loads the project id from environment variables.\n     * @api private\n     */\n    getProductionProjectId() {\n        return (process.env['GCLOUD_PROJECT'] ||\n            process.env['GOOGLE_CLOUD_PROJECT'] ||\n            process.env['gcloud_project'] ||\n            process.env['google_cloud_project']);\n    }\n    /**\n     * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n     * @api private\n     */\n    async getFileProjectId() {\n        if (this.cachedCredential) {\n            // Try to read the project ID from the cached credentials file\n            return this.cachedCredential.projectId;\n        }\n        // Ensure the projectId is loaded from the keyFile if available.\n        if (this.keyFilename) {\n            const creds = await this.getClient();\n            if (creds && creds.projectId) {\n                return creds.projectId;\n            }\n        }\n        // Try to load a credentials file and read its project ID\n        const r = await this._tryGetApplicationCredentialsFromEnvironmentVariable();\n        if (r) {\n            return r.projectId;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Gets the project ID from external account client if available.\n     */\n    async getExternalAccountClientProjectId() {\n        if (!this.jsonContent || this.jsonContent.type !== baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            return null;\n        }\n        const creds = await this.getClient();\n        // Do not suppress the underlying error, as the error could contain helpful\n        // information for debugging and fixing. This is especially true for\n        // external account creds as in order to get the project ID, the following\n        // operations have to succeed:\n        // 1. Valid credentials file should be supplied.\n        // 2. Ability to retrieve access tokens from STS token exchange API.\n        // 3. Ability to exchange for service account impersonated credentials (if\n        //    enabled).\n        // 4. Ability to get project info using the access token from step 2 or 3.\n        // Without surfacing the error, it is harder for developers to determine\n        // which step went wrong.\n        return await creds.getProjectId();\n    }\n    /**\n     * Gets the Compute Engine project ID if it can be inferred.\n     */\n    async getGCEProjectId() {\n        try {\n            const r = await gcpMetadata.project('project-id');\n            return r;\n        }\n        catch (e) {\n            // Ignore any errors\n            return null;\n        }\n    }\n    getCredentials(callback) {\n        if (callback) {\n            this.getCredentialsAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getCredentialsAsync();\n        }\n    }\n    async getCredentialsAsync() {\n        await this.getClient();\n        if (this.jsonContent) {\n            const credential = {\n                client_email: this.jsonContent.client_email,\n                private_key: this.jsonContent.private_key,\n            };\n            return credential;\n        }\n        const isGCE = await this._checkIsGCE();\n        if (!isGCE) {\n            throw new Error('Unknown error.');\n        }\n        // For GCE, return the service account details from the metadata server\n        // NOTE: The trailing '/' at the end of service-accounts/ is very important!\n        // The GCF metadata server doesn't respect querystring params if this / is\n        // not included.\n        const data = await gcpMetadata.instance({\n            property: 'service-accounts/',\n            params: { recursive: 'true' },\n        });\n        if (!data || !data.default || !data.default.email) {\n            throw new Error('Failure from metadata server.');\n        }\n        return { client_email: data.default.email };\n    }\n    /**\n     * Automatically obtain a client based on the provided configuration.  If no\n     * options were passed, use Application Default Credentials.\n     */\n    async getClient(options) {\n        if (options) {\n            throw new Error('Passing options to getClient is forbidden in v5.0.0. Use new GoogleAuth(opts) instead.');\n        }\n        if (!this.cachedCredential) {\n            if (this.jsonContent) {\n                this._cacheClientFromJSON(this.jsonContent, this.clientOptions);\n            }\n            else if (this.keyFilename) {\n                const filePath = path.resolve(this.keyFilename);\n                const stream = fs.createReadStream(filePath);\n                await this.fromStreamAsync(stream, this.clientOptions);\n            }\n            else {\n                await this.getApplicationDefaultAsync(this.clientOptions);\n            }\n        }\n        return this.cachedCredential;\n    }\n    /**\n     * Creates a client which will fetch an ID token for authorization.\n     * @param targetAudience the audience for the fetched ID token.\n     * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\n     */\n    async getIdTokenClient(targetAudience) {\n        const client = await this.getClient();\n        if (!('fetchIdToken' in client)) {\n            throw new Error('Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.');\n        }\n        return new idtokenclient_1.IdTokenClient({ targetAudience, idTokenProvider: client });\n    }\n    /**\n     * Automatically obtain application default credentials, and return\n     * an access token for making requests.\n     */\n    async getAccessToken() {\n        const client = await this.getClient();\n        return (await client.getAccessToken()).token;\n    }\n    /**\n     * Obtain the HTTP headers that will provide authorization for a given\n     * request.\n     */\n    async getRequestHeaders(url) {\n        const client = await this.getClient();\n        return client.getRequestHeaders(url);\n    }\n    /**\n     * Obtain credentials for a request, then attach the appropriate headers to\n     * the request options.\n     * @param opts Axios or Request options on which to attach the headers\n     */\n    async authorizeRequest(opts) {\n        opts = opts || {};\n        const url = opts.url || opts.uri;\n        const client = await this.getClient();\n        const headers = await client.getRequestHeaders(url);\n        opts.headers = Object.assign(opts.headers || {}, headers);\n        return opts;\n    }\n    /**\n     * Automatically obtain application default credentials, and make an\n     * HTTP request using the given options.\n     * @param opts Axios request options for the HTTP request.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(opts) {\n        const client = await this.getClient();\n        return client.request(opts);\n    }\n    /**\n     * Determine the compute environment in which the code is running.\n     */\n    getEnv() {\n        return envDetect_1.getEnv();\n    }\n    /**\n     * Sign the given data with the current private key, or go out\n     * to the IAM API to sign it.\n     * @param data The data to be signed.\n     */\n    async sign(data) {\n        const client = await this.getClient();\n        const crypto = crypto_1.createCrypto();\n        if (client instanceof jwtclient_1.JWT && client.key) {\n            const sign = await crypto.sign(client.key, data);\n            return sign;\n        }\n        // signBlob requires a service account email and the underlying\n        // access token to have iam.serviceAccounts.signBlob permission\n        // on the specified resource name.\n        // The \"Service Account Token Creator\" role should cover this.\n        // As a result external account credentials can support this\n        // operation when service account impersonation is enabled.\n        if (client instanceof baseexternalclient_1.BaseExternalAccountClient &&\n            client.getServiceAccountEmail()) {\n            return this.signBlob(crypto, client.getServiceAccountEmail(), data);\n        }\n        const projectId = await this.getProjectId();\n        if (!projectId) {\n            throw new Error('Cannot sign data without a project ID.');\n        }\n        const creds = await this.getCredentials();\n        if (!creds.client_email) {\n            throw new Error('Cannot sign data without `client_email`.');\n        }\n        return this.signBlob(crypto, creds.client_email, data);\n    }\n    async signBlob(crypto, emailOrUniqueId, data) {\n        const url = 'https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/' +\n            `${emailOrUniqueId}:signBlob`;\n        const res = await this.request({\n            method: 'POST',\n            url,\n            data: {\n                payload: crypto.encodeBase64StringUtf8(data),\n            },\n        });\n        return res.data.signedBlob;\n    }\n}\nexports.GoogleAuth = GoogleAuth;\n/**\n * Export DefaultTransporter as a static property of the class.\n */\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;\n//# sourceMappingURL=googleauth.js.map"]},"metadata":{},"sourceType":"script"}