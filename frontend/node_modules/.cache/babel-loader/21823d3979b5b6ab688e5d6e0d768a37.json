{"ast":null,"code":"\"use strict\"; // Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRetryConfig = void 0;\n\nfunction getRetryConfig(_x) {\n  return _getRetryConfig.apply(this, arguments);\n}\n\nfunction _getRetryConfig() {\n  _getRetryConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(err) {\n    var _a, config, retryRanges, shouldRetryFn, retryDelay, delay, backoff;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            config = getConfig(err);\n\n            if (!(!err || !err.config || !config && !err.config.retry)) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              shouldRetry: false\n            });\n\n          case 3:\n            config = config || {};\n            config.currentRetryAttempt = config.currentRetryAttempt || 0;\n            config.retry = config.retry === undefined || config.retry === null ? 3 : config.retry;\n            config.httpMethodsToRetry = config.httpMethodsToRetry || ['GET', 'HEAD', 'PUT', 'OPTIONS', 'DELETE'];\n            config.noResponseRetries = config.noResponseRetries === undefined || config.noResponseRetries === null ? 2 : config.noResponseRetries; // If this wasn't in the list of status codes where we want\n            // to automatically retry, return.\n\n            retryRanges = [// https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n            // 1xx - Retry (Informational, request still processing)\n            // 2xx - Do not retry (Success)\n            // 3xx - Do not retry (Redirect)\n            // 4xx - Do not retry (Client errors)\n            // 429 - Retry (\"Too Many Requests\")\n            // 5xx - Retry (Server errors)\n            [100, 199], [429, 429], [500, 599]];\n            config.statusCodesToRetry = config.statusCodesToRetry || retryRanges; // Put the config back into the err\n\n            err.config.retryConfig = config; // Determine if we should retry the request\n\n            shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n            _context.next = 14;\n            return shouldRetryFn(err);\n\n          case 14:\n            if (_context.sent) {\n              _context.next = 16;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              shouldRetry: false,\n              config: err.config\n            });\n\n          case 16:\n            // Calculate time to wait with exponential backoff.\n            // If this is the first retry, look for a configured retryDelay.\n            retryDelay = config.currentRetryAttempt ? 0 : (_a = config.retryDelay) !== null && _a !== void 0 ? _a : 100; // Formula: retryDelay + ((2^c - 1 / 2) * 1000)\n\n            delay = retryDelay + (Math.pow(2, config.currentRetryAttempt) - 1) / 2 * 1000; // We're going to retry!  Incremenent the counter.\n\n            err.config.retryConfig.currentRetryAttempt += 1; // Create a promise that invokes the retry after the backOffDelay\n\n            backoff = new Promise(function (resolve) {\n              setTimeout(resolve, delay);\n            }); // Notify the user if they added an `onRetryAttempt` handler\n\n            if (config.onRetryAttempt) {\n              config.onRetryAttempt(err);\n            } // Return the promise in which recalls Gaxios to retry the request\n\n\n            _context.next = 23;\n            return backoff;\n\n          case 23:\n            return _context.abrupt(\"return\", {\n              shouldRetry: true,\n              config: err.config\n            });\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getRetryConfig.apply(this, arguments);\n}\n\nexports.getRetryConfig = getRetryConfig;\n/**\n * Determine based on config if we should retry the request.\n * @param err The GaxiosError passed to the interceptor.\n */\n\nfunction shouldRetryRequest(err) {\n  var config = getConfig(err); // node-fetch raises an AbortError if signaled:\n  // https://github.com/bitinn/node-fetch#request-cancellation-with-abortsignal\n\n  if (err.name === 'AbortError') {\n    return false;\n  } // If there's no config, or retries are disabled, return.\n\n\n  if (!config || config.retry === 0) {\n    return false;\n  } // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n\n\n  if (!err.response && (config.currentRetryAttempt || 0) >= config.noResponseRetries) {\n    return false;\n  } // Only retry with configured HttpMethods.\n\n\n  if (!err.config.method || config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {\n    return false;\n  } // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n\n\n  if (err.response && err.response.status) {\n    var isInRange = false;\n\n    var _iterator = _createForOfIteratorHelper(config.statusCodesToRetry),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            min = _step$value[0],\n            max = _step$value[1];\n\n        var status = err.response.status;\n\n        if (status >= min && status <= max) {\n          isInRange = true;\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    if (!isInRange) {\n      return false;\n    }\n  } // If we are out of retry attempts, return\n\n\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n\n  if (config.currentRetryAttempt >= config.retry) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Acquire the raxConfig object from an GaxiosError if available.\n * @param err The Gaxios error with a config object.\n */\n\n\nfunction getConfig(err) {\n  if (err && err.config && err.config.retryConfig) {\n    return err.config.retryConfig;\n  }\n\n  return;\n}","map":{"version":3,"sources":["../../src/retry.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRetryConfig = void 0;\nasync function getRetryConfig(err) {\n    var _a;\n    let config = getConfig(err);\n    if (!err || !err.config || (!config && !err.config.retry)) {\n        return { shouldRetry: false };\n    }\n    config = config || {};\n    config.currentRetryAttempt = config.currentRetryAttempt || 0;\n    config.retry =\n        config.retry === undefined || config.retry === null ? 3 : config.retry;\n    config.httpMethodsToRetry = config.httpMethodsToRetry || [\n        'GET',\n        'HEAD',\n        'PUT',\n        'OPTIONS',\n        'DELETE',\n    ];\n    config.noResponseRetries =\n        config.noResponseRetries === undefined || config.noResponseRetries === null\n            ? 2\n            : config.noResponseRetries;\n    // If this wasn't in the list of status codes where we want\n    // to automatically retry, return.\n    const retryRanges = [\n        // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n        // 1xx - Retry (Informational, request still processing)\n        // 2xx - Do not retry (Success)\n        // 3xx - Do not retry (Redirect)\n        // 4xx - Do not retry (Client errors)\n        // 429 - Retry (\"Too Many Requests\")\n        // 5xx - Retry (Server errors)\n        [100, 199],\n        [429, 429],\n        [500, 599],\n    ];\n    config.statusCodesToRetry = config.statusCodesToRetry || retryRanges;\n    // Put the config back into the err\n    err.config.retryConfig = config;\n    // Determine if we should retry the request\n    const shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n    if (!(await shouldRetryFn(err))) {\n        return { shouldRetry: false, config: err.config };\n    }\n    // Calculate time to wait with exponential backoff.\n    // If this is the first retry, look for a configured retryDelay.\n    const retryDelay = config.currentRetryAttempt ? 0 : (_a = config.retryDelay) !== null && _a !== void 0 ? _a : 100;\n    // Formula: retryDelay + ((2^c - 1 / 2) * 1000)\n    const delay = retryDelay + ((Math.pow(2, config.currentRetryAttempt) - 1) / 2) * 1000;\n    // We're going to retry!  Incremenent the counter.\n    err.config.retryConfig.currentRetryAttempt += 1;\n    // Create a promise that invokes the retry after the backOffDelay\n    const backoff = new Promise(resolve => {\n        setTimeout(resolve, delay);\n    });\n    // Notify the user if they added an `onRetryAttempt` handler\n    if (config.onRetryAttempt) {\n        config.onRetryAttempt(err);\n    }\n    // Return the promise in which recalls Gaxios to retry the request\n    await backoff;\n    return { shouldRetry: true, config: err.config };\n}\nexports.getRetryConfig = getRetryConfig;\n/**\n * Determine based on config if we should retry the request.\n * @param err The GaxiosError passed to the interceptor.\n */\nfunction shouldRetryRequest(err) {\n    const config = getConfig(err);\n    // node-fetch raises an AbortError if signaled:\n    // https://github.com/bitinn/node-fetch#request-cancellation-with-abortsignal\n    if (err.name === 'AbortError') {\n        return false;\n    }\n    // If there's no config, or retries are disabled, return.\n    if (!config || config.retry === 0) {\n        return false;\n    }\n    // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n    if (!err.response &&\n        (config.currentRetryAttempt || 0) >= config.noResponseRetries) {\n        return false;\n    }\n    // Only retry with configured HttpMethods.\n    if (!err.config.method ||\n        config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {\n        return false;\n    }\n    // If this wasn't in the list of status codes where we want\n    // to automatically retry, return.\n    if (err.response && err.response.status) {\n        let isInRange = false;\n        for (const [min, max] of config.statusCodesToRetry) {\n            const status = err.response.status;\n            if (status >= min && status <= max) {\n                isInRange = true;\n                break;\n            }\n        }\n        if (!isInRange) {\n            return false;\n        }\n    }\n    // If we are out of retry attempts, return\n    config.currentRetryAttempt = config.currentRetryAttempt || 0;\n    if (config.currentRetryAttempt >= config.retry) {\n        return false;\n    }\n    return true;\n}\n/**\n * Acquire the raxConfig object from an GaxiosError if available.\n * @param err The Gaxios error with a config object.\n */\nfunction getConfig(err) {\n    if (err && err.config && err.config.retryConfig) {\n        return err.config.retryConfig;\n    }\n    return;\n}\n//# sourceMappingURL=retry.js.map"]},"metadata":{},"sourceType":"script"}