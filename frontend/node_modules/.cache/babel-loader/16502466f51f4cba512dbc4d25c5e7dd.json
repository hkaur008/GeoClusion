{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AwsClient = void 0;\n\nvar awsrequestsigner_1 = require(\"./awsrequestsigner\");\n\nvar baseexternalclient_1 = require(\"./baseexternalclient\");\n/**\n * AWS external account client. This is used for AWS workloads, where\n * AWS STS GetCallerIdentity serialized signed requests are exchanged for\n * GCP access token.\n */\n\n\nvar AwsClient = /*#__PURE__*/function (_baseexternalclient_) {\n  _inherits(AwsClient, _baseexternalclient_);\n\n  var _super = _createSuper(AwsClient);\n\n  /**\n   * Instantiates an AwsClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * An error is thrown if the credential is not a valid AWS credential.\n   * @param options The external account options object typically loaded\n   *   from the external account JSON credential file.\n   * @param additionalOptions Optional additional behavior customization\n   *   options. These currently customize expiration threshold time and\n   *   whether to retry on 401/403 API request errors.\n   */\n  function AwsClient(options, additionalOptions) {\n    var _this;\n\n    _classCallCheck(this, AwsClient);\n\n    var _a;\n\n    _this = _super.call(this, options, additionalOptions);\n    _this.environmentId = options.credential_source.environment_id; // This is only required if the AWS region is not available in the\n    // AWS_REGION or AWS_DEFAULT_REGION environment variables.\n\n    _this.regionUrl = options.credential_source.region_url; // This is only required if AWS security credentials are not available in\n    // environment variables.\n\n    _this.securityCredentialsUrl = options.credential_source.url;\n    _this.regionalCredVerificationUrl = options.credential_source.regional_cred_verification_url;\n    var match = (_a = _this.environmentId) === null || _a === void 0 ? void 0 : _a.match(/^(aws)(\\d+)$/);\n\n    if (!match || !_this.regionalCredVerificationUrl) {\n      throw new Error('No valid AWS \"credential_source\" provided');\n    } else if (parseInt(match[2], 10) !== 1) {\n      throw new Error(\"aws version \\\"\".concat(match[2], \"\\\" is not supported in the current build.\"));\n    }\n\n    _this.awsRequestSigner = null;\n    _this.region = '';\n    return _this;\n  }\n  /**\n   * Triggered when an external subject token is needed to be exchanged for a\n   * GCP access token via GCP STS endpoint.\n   * This uses the `options.credential_source` object to figure out how\n   * to retrieve the token using the current environment. In this case,\n   * this uses a serialized AWS signed request to the STS GetCallerIdentity\n   * endpoint.\n   * The logic is summarized as:\n   * 1. Retrieve AWS region from availability-zone.\n   * 2a. Check AWS credentials in environment variables. If not found, get\n   *     from security-credentials endpoint.\n   * 2b. Get AWS credentials from security-credentials endpoint. In order\n   *     to retrieve this, the AWS role needs to be determined by calling\n   *     security-credentials endpoint without any argument. Then the\n   *     credentials can be retrieved via: security-credentials/role_name\n   * 3. Generate the signed request to AWS STS GetCallerIdentity action.\n   * 4. Inject x-goog-cloud-target-resource into header and serialize the\n   *    signed request. This will be the subject-token to pass to GCP STS.\n   * @return A promise that resolves with the external subject token.\n   */\n\n\n  _createClass(AwsClient, [{\n    key: \"retrieveSubjectToken\",\n    value: function () {\n      var _retrieveSubjectToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var options, reformattedHeader, extendedHeaders, key;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.awsRequestSigner) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                _context2.next = 3;\n                return this.getAwsRegion();\n\n              case 3:\n                this.region = _context2.sent;\n                this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var roleName, awsCreds;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          if (!(process.env['AWS_ACCESS_KEY_ID'] && process.env['AWS_SECRET_ACCESS_KEY'])) {\n                            _context.next = 2;\n                            break;\n                          }\n\n                          return _context.abrupt(\"return\", {\n                            accessKeyId: process.env['AWS_ACCESS_KEY_ID'],\n                            secretAccessKey: process.env['AWS_SECRET_ACCESS_KEY'],\n                            // This is normally not available for permanent credentials.\n                            token: process.env['AWS_SESSION_TOKEN']\n                          });\n\n                        case 2:\n                          _context.next = 4;\n                          return _this2.getAwsRoleName();\n\n                        case 4:\n                          roleName = _context.sent;\n                          _context.next = 7;\n                          return _this2.getAwsSecurityCredentials(roleName);\n\n                        case 7:\n                          awsCreds = _context.sent;\n                          return _context.abrupt(\"return\", {\n                            accessKeyId: awsCreds.AccessKeyId,\n                            secretAccessKey: awsCreds.SecretAccessKey,\n                            token: awsCreds.Token\n                          });\n\n                        case 9:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                })), this.region);\n\n              case 5:\n                _context2.next = 7;\n                return this.awsRequestSigner.getRequestOptions({\n                  url: this.regionalCredVerificationUrl.replace('{region}', this.region),\n                  method: 'POST'\n                });\n\n              case 7:\n                options = _context2.sent;\n                // The GCP STS endpoint expects the headers to be formatted as:\n                // [\n                //   {key: 'x-amz-date', value: '...'},\n                //   {key: 'Authorization', value: '...'},\n                //   ...\n                // ]\n                // And then serialized as:\n                // encodeURIComponent(JSON.stringify({\n                //   url: '...',\n                //   method: 'POST',\n                //   headers: [{key: 'x-amz-date', value: '...'}, ...]\n                // }))\n                reformattedHeader = [];\n                extendedHeaders = Object.assign({\n                  // The full, canonical resource name of the workload identity pool\n                  // provider, with or without the HTTPS prefix.\n                  // Including this header as part of the signature is recommended to\n                  // ensure data integrity.\n                  'x-goog-cloud-target-resource': this.audience\n                }, options.headers); // Reformat header to GCP STS expected format.\n\n                for (key in extendedHeaders) {\n                  reformattedHeader.push({\n                    key: key,\n                    value: extendedHeaders[key]\n                  });\n                } // Serialize the reformatted signed request.\n\n\n                return _context2.abrupt(\"return\", encodeURIComponent(JSON.stringify({\n                  url: options.url,\n                  method: options.method,\n                  headers: reformattedHeader\n                })));\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function retrieveSubjectToken() {\n        return _retrieveSubjectToken.apply(this, arguments);\n      }\n\n      return retrieveSubjectToken;\n    }()\n    /**\n     * @return A promise that resolves with the current AWS region.\n     */\n\n  }, {\n    key: \"getAwsRegion\",\n    value: function () {\n      var _getAwsRegion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var opts, response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(process.env['AWS_REGION'] || process.env['AWS_DEFAULT_REGION'])) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", process.env['AWS_REGION'] || process.env['AWS_DEFAULT_REGION']);\n\n              case 2:\n                if (this.regionUrl) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                throw new Error('Unable to determine AWS region due to missing ' + '\"options.credential_source.region_url\"');\n\n              case 4:\n                opts = {\n                  url: this.regionUrl,\n                  method: 'GET',\n                  responseType: 'text'\n                };\n                _context3.next = 7;\n                return this.transporter.request(opts);\n\n              case 7:\n                response = _context3.sent;\n                return _context3.abrupt(\"return\", response.data.substr(0, response.data.length - 1));\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getAwsRegion() {\n        return _getAwsRegion.apply(this, arguments);\n      }\n\n      return getAwsRegion;\n    }()\n    /**\n     * @return A promise that resolves with the assigned role to the current\n     *   AWS VM. This is needed for calling the security-credentials endpoint.\n     */\n\n  }, {\n    key: \"getAwsRoleName\",\n    value: function () {\n      var _getAwsRoleName = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var opts, response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.securityCredentialsUrl) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw new Error('Unable to determine AWS role name due to missing ' + '\"options.credential_source.url\"');\n\n              case 2:\n                opts = {\n                  url: this.securityCredentialsUrl,\n                  method: 'GET',\n                  responseType: 'text'\n                };\n                _context4.next = 5;\n                return this.transporter.request(opts);\n\n              case 5:\n                response = _context4.sent;\n                return _context4.abrupt(\"return\", response.data);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getAwsRoleName() {\n        return _getAwsRoleName.apply(this, arguments);\n      }\n\n      return getAwsRoleName;\n    }()\n    /**\n     * Retrieves the temporary AWS credentials by calling the security-credentials\n     * endpoint as specified in the `credential_source` object.\n     * @param roleName The role attached to the current VM.\n     * @return A promise that resolves with the temporary AWS credentials\n     *   needed for creating the GetCallerIdentity signed request.\n     */\n\n  }, {\n    key: \"getAwsSecurityCredentials\",\n    value: function () {\n      var _getAwsSecurityCredentials = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(roleName) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.transporter.request({\n                  url: \"\".concat(this.securityCredentialsUrl, \"/\").concat(roleName),\n                  responseType: 'json'\n                });\n\n              case 2:\n                response = _context5.sent;\n                return _context5.abrupt(\"return\", response.data);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getAwsSecurityCredentials(_x) {\n        return _getAwsSecurityCredentials.apply(this, arguments);\n      }\n\n      return getAwsSecurityCredentials;\n    }()\n  }]);\n\n  return AwsClient;\n}(baseexternalclient_1.BaseExternalAccountClient);\n\nexports.AwsClient = AwsClient;","map":{"version":3,"sources":["/workspaces/MLH-hackathon-project/frontend/node_modules/google-auth-library/build/src/auth/awsclient.js"],"names":["Object","defineProperty","exports","value","AwsClient","awsrequestsigner_1","require","baseexternalclient_1","options","additionalOptions","_a","environmentId","credential_source","environment_id","regionUrl","region_url","securityCredentialsUrl","url","regionalCredVerificationUrl","regional_cred_verification_url","match","Error","parseInt","awsRequestSigner","region","getAwsRegion","AwsRequestSigner","process","env","accessKeyId","secretAccessKey","token","getAwsRoleName","roleName","getAwsSecurityCredentials","awsCreds","AccessKeyId","SecretAccessKey","Token","getRequestOptions","replace","method","reformattedHeader","extendedHeaders","assign","audience","headers","key","push","encodeURIComponent","JSON","stringify","opts","responseType","transporter","request","response","data","substr","length","BaseExternalAccountClient"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AwsClient = void 0;\nconst awsrequestsigner_1 = require(\"./awsrequestsigner\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n/**\n * AWS external account client. This is used for AWS workloads, where\n * AWS STS GetCallerIdentity serialized signed requests are exchanged for\n * GCP access token.\n */\nclass AwsClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiates an AwsClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid AWS credential.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file.\n     * @param additionalOptions Optional additional behavior customization\n     *   options. These currently customize expiration threshold time and\n     *   whether to retry on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        var _a;\n        super(options, additionalOptions);\n        this.environmentId = options.credential_source.environment_id;\n        // This is only required if the AWS region is not available in the\n        // AWS_REGION or AWS_DEFAULT_REGION environment variables.\n        this.regionUrl = options.credential_source.region_url;\n        // This is only required if AWS security credentials are not available in\n        // environment variables.\n        this.securityCredentialsUrl = options.credential_source.url;\n        this.regionalCredVerificationUrl =\n            options.credential_source.regional_cred_verification_url;\n        const match = (_a = this.environmentId) === null || _a === void 0 ? void 0 : _a.match(/^(aws)(\\d+)$/);\n        if (!match || !this.regionalCredVerificationUrl) {\n            throw new Error('No valid AWS \"credential_source\" provided');\n        }\n        else if (parseInt(match[2], 10) !== 1) {\n            throw new Error(`aws version \"${match[2]}\" is not supported in the current build.`);\n        }\n        this.awsRequestSigner = null;\n        this.region = '';\n    }\n    /**\n     * Triggered when an external subject token is needed to be exchanged for a\n     * GCP access token via GCP STS endpoint.\n     * This uses the `options.credential_source` object to figure out how\n     * to retrieve the token using the current environment. In this case,\n     * this uses a serialized AWS signed request to the STS GetCallerIdentity\n     * endpoint.\n     * The logic is summarized as:\n     * 1. Retrieve AWS region from availability-zone.\n     * 2a. Check AWS credentials in environment variables. If not found, get\n     *     from security-credentials endpoint.\n     * 2b. Get AWS credentials from security-credentials endpoint. In order\n     *     to retrieve this, the AWS role needs to be determined by calling\n     *     security-credentials endpoint without any argument. Then the\n     *     credentials can be retrieved via: security-credentials/role_name\n     * 3. Generate the signed request to AWS STS GetCallerIdentity action.\n     * 4. Inject x-goog-cloud-target-resource into header and serialize the\n     *    signed request. This will be the subject-token to pass to GCP STS.\n     * @return A promise that resolves with the external subject token.\n     */\n    async retrieveSubjectToken() {\n        // Initialize AWS request signer if not already initialized.\n        if (!this.awsRequestSigner) {\n            this.region = await this.getAwsRegion();\n            this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner(async () => {\n                // Check environment variables for permanent credentials first.\n                // https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html\n                if (process.env['AWS_ACCESS_KEY_ID'] &&\n                    process.env['AWS_SECRET_ACCESS_KEY']) {\n                    return {\n                        accessKeyId: process.env['AWS_ACCESS_KEY_ID'],\n                        secretAccessKey: process.env['AWS_SECRET_ACCESS_KEY'],\n                        // This is normally not available for permanent credentials.\n                        token: process.env['AWS_SESSION_TOKEN'],\n                    };\n                }\n                // Since the role on a VM can change, we don't need to cache it.\n                const roleName = await this.getAwsRoleName();\n                // Temporary credentials typically last for several hours.\n                // Expiration is returned in response.\n                // Consider future optimization of this logic to cache AWS tokens\n                // until their natural expiration.\n                const awsCreds = await this.getAwsSecurityCredentials(roleName);\n                return {\n                    accessKeyId: awsCreds.AccessKeyId,\n                    secretAccessKey: awsCreds.SecretAccessKey,\n                    token: awsCreds.Token,\n                };\n            }, this.region);\n        }\n        // Generate signed request to AWS STS GetCallerIdentity API.\n        // Use the required regional endpoint. Otherwise, the request will fail.\n        const options = await this.awsRequestSigner.getRequestOptions({\n            url: this.regionalCredVerificationUrl.replace('{region}', this.region),\n            method: 'POST',\n        });\n        // The GCP STS endpoint expects the headers to be formatted as:\n        // [\n        //   {key: 'x-amz-date', value: '...'},\n        //   {key: 'Authorization', value: '...'},\n        //   ...\n        // ]\n        // And then serialized as:\n        // encodeURIComponent(JSON.stringify({\n        //   url: '...',\n        //   method: 'POST',\n        //   headers: [{key: 'x-amz-date', value: '...'}, ...]\n        // }))\n        const reformattedHeader = [];\n        const extendedHeaders = Object.assign({\n            // The full, canonical resource name of the workload identity pool\n            // provider, with or without the HTTPS prefix.\n            // Including this header as part of the signature is recommended to\n            // ensure data integrity.\n            'x-goog-cloud-target-resource': this.audience,\n        }, options.headers);\n        // Reformat header to GCP STS expected format.\n        for (const key in extendedHeaders) {\n            reformattedHeader.push({\n                key,\n                value: extendedHeaders[key],\n            });\n        }\n        // Serialize the reformatted signed request.\n        return encodeURIComponent(JSON.stringify({\n            url: options.url,\n            method: options.method,\n            headers: reformattedHeader,\n        }));\n    }\n    /**\n     * @return A promise that resolves with the current AWS region.\n     */\n    async getAwsRegion() {\n        // Priority order for region determination:\n        // AWS_REGION > AWS_DEFAULT_REGION > metadata server.\n        if (process.env['AWS_REGION'] || process.env['AWS_DEFAULT_REGION']) {\n            return (process.env['AWS_REGION'] || process.env['AWS_DEFAULT_REGION']);\n        }\n        if (!this.regionUrl) {\n            throw new Error('Unable to determine AWS region due to missing ' +\n                '\"options.credential_source.region_url\"');\n        }\n        const opts = {\n            url: this.regionUrl,\n            method: 'GET',\n            responseType: 'text',\n        };\n        const response = await this.transporter.request(opts);\n        // Remove last character. For example, if us-east-2b is returned,\n        // the region would be us-east-2.\n        return response.data.substr(0, response.data.length - 1);\n    }\n    /**\n     * @return A promise that resolves with the assigned role to the current\n     *   AWS VM. This is needed for calling the security-credentials endpoint.\n     */\n    async getAwsRoleName() {\n        if (!this.securityCredentialsUrl) {\n            throw new Error('Unable to determine AWS role name due to missing ' +\n                '\"options.credential_source.url\"');\n        }\n        const opts = {\n            url: this.securityCredentialsUrl,\n            method: 'GET',\n            responseType: 'text',\n        };\n        const response = await this.transporter.request(opts);\n        return response.data;\n    }\n    /**\n     * Retrieves the temporary AWS credentials by calling the security-credentials\n     * endpoint as specified in the `credential_source` object.\n     * @param roleName The role attached to the current VM.\n     * @return A promise that resolves with the temporary AWS credentials\n     *   needed for creating the GetCallerIdentity signed request.\n     */\n    async getAwsSecurityCredentials(roleName) {\n        const response = await this.transporter.request({\n            url: `${this.securityCredentialsUrl}/${roleName}`,\n            responseType: 'json',\n        });\n        return response.data;\n    }\n}\nexports.AwsClient = AwsClient;\n//# sourceMappingURL=awsclient.js.map"]},"metadata":{},"sourceType":"script"}