{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* global window */\n\nvar _toConsumableArray = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BrowserCrypto = void 0; // This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\n\nvar base64js = require(\"base64-js\"); // Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\n// eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n\nif (typeof process === 'undefined' && typeof TextEncoder === 'undefined') {\n  require('fast-text-encoding');\n}\n\nvar crypto_1 = require(\"../crypto\");\n\nvar BrowserCrypto = /*#__PURE__*/function () {\n  function BrowserCrypto() {\n    _classCallCheck(this, BrowserCrypto);\n\n    if (typeof window === 'undefined' || window.crypto === undefined || window.crypto.subtle === undefined) {\n      throw new Error(\"SubtleCrypto not found. Make sure it's an https:// website.\");\n    }\n  }\n\n  _createClass(BrowserCrypto, [{\n    key: \"sha256DigestBase64\",\n    value: function () {\n      var _sha256DigestBase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(str) {\n        var inputBuffer, outputBuffer;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // SubtleCrypto digest() method is async, so we must make\n                // this method async as well.\n                // To calculate SHA256 digest using SubtleCrypto, we first\n                // need to convert an input string to an ArrayBuffer:\n                // eslint-disable-next-line node/no-unsupported-features/node-builtins\n                inputBuffer = new TextEncoder().encode(str); // Result is ArrayBuffer as well.\n\n                _context.next = 3;\n                return window.crypto.subtle.digest('SHA-256', inputBuffer);\n\n              case 3:\n                outputBuffer = _context.sent;\n                return _context.abrupt(\"return\", base64js.fromByteArray(new Uint8Array(outputBuffer)));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function sha256DigestBase64(_x) {\n        return _sha256DigestBase.apply(this, arguments);\n      }\n\n      return sha256DigestBase64;\n    }()\n  }, {\n    key: \"randomBytesBase64\",\n    value: function randomBytesBase64(count) {\n      var array = new Uint8Array(count);\n      window.crypto.getRandomValues(array);\n      return base64js.fromByteArray(array);\n    }\n  }, {\n    key: \"verify\",\n    value: function () {\n      var _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(pubkey, data, signature) {\n        var algo, dataArray, signatureArray, cryptoKey, result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                algo = {\n                  name: 'RSASSA-PKCS1-v1_5',\n                  hash: {\n                    name: 'SHA-256'\n                  }\n                }; // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n                dataArray = new TextEncoder().encode(data);\n                signatureArray = base64js.toByteArray(BrowserCrypto.padBase64(signature));\n                _context2.next = 5;\n                return window.crypto.subtle.importKey('jwk', pubkey, algo, true, ['verify']);\n\n              case 5:\n                cryptoKey = _context2.sent;\n                _context2.next = 8;\n                return window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n\n              case 8:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function verify(_x2, _x3, _x4) {\n        return _verify.apply(this, arguments);\n      }\n\n      return verify;\n    }()\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(privateKey, data) {\n        var algo, dataArray, cryptoKey, result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                algo = {\n                  name: 'RSASSA-PKCS1-v1_5',\n                  hash: {\n                    name: 'SHA-256'\n                  }\n                }; // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n                dataArray = new TextEncoder().encode(data);\n                _context3.next = 4;\n                return window.crypto.subtle.importKey('jwk', privateKey, algo, true, ['sign']);\n\n              case 4:\n                cryptoKey = _context3.sent;\n                _context3.next = 7;\n                return window.crypto.subtle.sign(algo, cryptoKey, dataArray);\n\n              case 7:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", base64js.fromByteArray(new Uint8Array(result)));\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function sign(_x5, _x6) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }, {\n    key: \"decodeBase64StringUtf8\",\n    value: function decodeBase64StringUtf8(base64) {\n      var uint8array = base64js.toByteArray(BrowserCrypto.padBase64(base64)); // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n      var result = new TextDecoder().decode(uint8array);\n      return result;\n    }\n  }, {\n    key: \"encodeBase64StringUtf8\",\n    value: function encodeBase64StringUtf8(text) {\n      // eslint-disable-next-line node/no-unsupported-features/node-builtins\n      var uint8array = new TextEncoder().encode(text);\n      var result = base64js.fromByteArray(uint8array);\n      return result;\n    }\n    /**\n     * Computes the SHA-256 hash of the provided string.\n     * @param str The plain text string to hash.\n     * @return A promise that resolves with the SHA-256 hash of the provided\n     *   string in hexadecimal encoding.\n     */\n\n  }, {\n    key: \"sha256DigestHex\",\n    value: function () {\n      var _sha256DigestHex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(str) {\n        var inputBuffer, outputBuffer;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                // SubtleCrypto digest() method is async, so we must make\n                // this method async as well.\n                // To calculate SHA256 digest using SubtleCrypto, we first\n                // need to convert an input string to an ArrayBuffer:\n                // eslint-disable-next-line node/no-unsupported-features/node-builtins\n                inputBuffer = new TextEncoder().encode(str); // Result is ArrayBuffer as well.\n\n                _context4.next = 3;\n                return window.crypto.subtle.digest('SHA-256', inputBuffer);\n\n              case 3:\n                outputBuffer = _context4.sent;\n                return _context4.abrupt(\"return\", crypto_1.fromArrayBufferToHex(outputBuffer));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function sha256DigestHex(_x7) {\n        return _sha256DigestHex.apply(this, arguments);\n      }\n\n      return sha256DigestHex;\n    }()\n    /**\n     * Computes the HMAC hash of a message using the provided crypto key and the\n     * SHA-256 algorithm.\n     * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n     * @param msg The plain text message.\n     * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n     *   format.\n     */\n\n  }, {\n    key: \"signWithHmacSha256\",\n    value: function () {\n      var _signWithHmacSha = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(key, msg) {\n        var rawKey, enc, cryptoKey;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                // Convert key, if provided in ArrayBuffer format, to string.\n                rawKey = typeof key === 'string' ? key : String.fromCharCode.apply(String, _toConsumableArray(new Uint16Array(key))); // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n                enc = new TextEncoder();\n                _context5.next = 4;\n                return window.crypto.subtle.importKey('raw', enc.encode(rawKey), {\n                  name: 'HMAC',\n                  hash: {\n                    name: 'SHA-256'\n                  }\n                }, false, ['sign']);\n\n              case 4:\n                cryptoKey = _context5.sent;\n                return _context5.abrupt(\"return\", window.crypto.subtle.sign('HMAC', cryptoKey, enc.encode(msg)));\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function signWithHmacSha256(_x8, _x9) {\n        return _signWithHmacSha.apply(this, arguments);\n      }\n\n      return signWithHmacSha256;\n    }()\n  }], [{\n    key: \"padBase64\",\n    value: function padBase64(base64) {\n      // base64js requires padding, so let's add some '='\n      while (base64.length % 4 !== 0) {\n        base64 += '=';\n      }\n\n      return base64;\n    }\n  }]);\n\n  return BrowserCrypto;\n}();\n\nexports.BrowserCrypto = BrowserCrypto;","map":{"version":3,"sources":["/workspaces/MLH-hackathon-project/frontend/node_modules/google-auth-library/build/src/crypto/browser/crypto.js"],"names":["Object","defineProperty","exports","value","BrowserCrypto","base64js","require","process","TextEncoder","crypto_1","window","crypto","undefined","subtle","Error","str","inputBuffer","encode","digest","outputBuffer","fromByteArray","Uint8Array","count","array","getRandomValues","pubkey","data","signature","algo","name","hash","dataArray","signatureArray","toByteArray","padBase64","importKey","cryptoKey","verify","result","privateKey","sign","base64","uint8array","TextDecoder","decode","text","fromArrayBufferToHex","key","msg","rawKey","String","fromCharCode","Uint16Array","enc","length"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global window */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BrowserCrypto = void 0;\n// This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\nconst base64js = require(\"base64-js\");\n// Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\n// eslint-disable-next-line node/no-unsupported-features/node-builtins\nif (typeof process === 'undefined' && typeof TextEncoder === 'undefined') {\n    require('fast-text-encoding');\n}\nconst crypto_1 = require(\"../crypto\");\nclass BrowserCrypto {\n    constructor() {\n        if (typeof window === 'undefined' ||\n            window.crypto === undefined ||\n            window.crypto.subtle === undefined) {\n            throw new Error(\"SubtleCrypto not found. Make sure it's an https:// website.\");\n        }\n    }\n    async sha256DigestBase64(str) {\n        // SubtleCrypto digest() method is async, so we must make\n        // this method async as well.\n        // To calculate SHA256 digest using SubtleCrypto, we first\n        // need to convert an input string to an ArrayBuffer:\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const inputBuffer = new TextEncoder().encode(str);\n        // Result is ArrayBuffer as well.\n        const outputBuffer = await window.crypto.subtle.digest('SHA-256', inputBuffer);\n        return base64js.fromByteArray(new Uint8Array(outputBuffer));\n    }\n    randomBytesBase64(count) {\n        const array = new Uint8Array(count);\n        window.crypto.getRandomValues(array);\n        return base64js.fromByteArray(array);\n    }\n    static padBase64(base64) {\n        // base64js requires padding, so let's add some '='\n        while (base64.length % 4 !== 0) {\n            base64 += '=';\n        }\n        return base64;\n    }\n    async verify(pubkey, data, signature) {\n        const algo = {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: { name: 'SHA-256' },\n        };\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const dataArray = new TextEncoder().encode(data);\n        const signatureArray = base64js.toByteArray(BrowserCrypto.padBase64(signature));\n        const cryptoKey = await window.crypto.subtle.importKey('jwk', pubkey, algo, true, ['verify']);\n        // SubtleCrypto's verify method is async so we must make\n        // this method async as well.\n        const result = await window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n        return result;\n    }\n    async sign(privateKey, data) {\n        const algo = {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: { name: 'SHA-256' },\n        };\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const dataArray = new TextEncoder().encode(data);\n        const cryptoKey = await window.crypto.subtle.importKey('jwk', privateKey, algo, true, ['sign']);\n        // SubtleCrypto's sign method is async so we must make\n        // this method async as well.\n        const result = await window.crypto.subtle.sign(algo, cryptoKey, dataArray);\n        return base64js.fromByteArray(new Uint8Array(result));\n    }\n    decodeBase64StringUtf8(base64) {\n        const uint8array = base64js.toByteArray(BrowserCrypto.padBase64(base64));\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const result = new TextDecoder().decode(uint8array);\n        return result;\n    }\n    encodeBase64StringUtf8(text) {\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const uint8array = new TextEncoder().encode(text);\n        const result = base64js.fromByteArray(uint8array);\n        return result;\n    }\n    /**\n     * Computes the SHA-256 hash of the provided string.\n     * @param str The plain text string to hash.\n     * @return A promise that resolves with the SHA-256 hash of the provided\n     *   string in hexadecimal encoding.\n     */\n    async sha256DigestHex(str) {\n        // SubtleCrypto digest() method is async, so we must make\n        // this method async as well.\n        // To calculate SHA256 digest using SubtleCrypto, we first\n        // need to convert an input string to an ArrayBuffer:\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const inputBuffer = new TextEncoder().encode(str);\n        // Result is ArrayBuffer as well.\n        const outputBuffer = await window.crypto.subtle.digest('SHA-256', inputBuffer);\n        return crypto_1.fromArrayBufferToHex(outputBuffer);\n    }\n    /**\n     * Computes the HMAC hash of a message using the provided crypto key and the\n     * SHA-256 algorithm.\n     * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n     * @param msg The plain text message.\n     * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n     *   format.\n     */\n    async signWithHmacSha256(key, msg) {\n        // Convert key, if provided in ArrayBuffer format, to string.\n        const rawKey = typeof key === 'string'\n            ? key\n            : String.fromCharCode(...new Uint16Array(key));\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const enc = new TextEncoder();\n        const cryptoKey = await window.crypto.subtle.importKey('raw', enc.encode(rawKey), {\n            name: 'HMAC',\n            hash: {\n                name: 'SHA-256',\n            },\n        }, false, ['sign']);\n        return window.crypto.subtle.sign('HMAC', cryptoKey, enc.encode(msg));\n    }\n}\nexports.BrowserCrypto = BrowserCrypto;\n//# sourceMappingURL=crypto.js.map"]},"metadata":{},"sourceType":"script"}