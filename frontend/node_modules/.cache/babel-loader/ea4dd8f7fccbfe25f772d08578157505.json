{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _regeneratorRuntime = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Impersonated = void 0;\n\nvar oauth2client_1 = require(\"./oauth2client\");\n\nvar Impersonated = /*#__PURE__*/function (_oauth2client_1$OAuth) {\n  _inherits(Impersonated, _oauth2client_1$OAuth);\n\n  var _super = _createSuper(Impersonated);\n\n  /**\n   * Impersonated service account credentials.\n   *\n   * Create a new access token by impersonating another service account.\n   *\n   * Impersonated Credentials allowing credentials issued to a user or\n   * service account to impersonate another. The source project using\n   * Impersonated Credentials must enable the \"IAMCredentials\" API.\n   * Also, the target service account must grant the orginating principal\n   * the \"Service Account Token Creator\" IAM role.\n   *\n   * @param {object} options - The configuration object.\n   * @param {object} [options.sourceClient] the source credential used as to\n   * acquire the impersonated credentials.\n   * @param {string} [options.targetPrincipal] the service account to\n   * impersonate.\n   * @param {string[]} [options.delegates] the chained list of delegates\n   * required to grant the final access_token. If set, the sequence of\n   * identities must have \"Service Account Token Creator\" capability granted to\n   * the preceding identity. For example, if set to [serviceAccountB,\n   * serviceAccountC], the sourceCredential must have the Token Creator role on\n   * serviceAccountB. serviceAccountB must have the Token Creator on\n   * serviceAccountC. Finally, C must have Token Creator on target_principal.\n   * If left unset, sourceCredential must have that role on targetPrincipal.\n   * @param {string[]} [options.targetScopes] scopes to request during the\n   * authorization grant.\n   * @param {number} [options.lifetime] number of seconds the delegated\n   * credential should be valid for up to 3600 seconds by default, or 43,200\n   * seconds by extending the token's lifetime, see:\n   * https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials#sa-credentials-oauth\n   * @param {string} [options.endpoint] api endpoint override.\n   */\n  function Impersonated() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Impersonated);\n\n    var _a, _b, _c, _d, _e, _f;\n\n    _this = _super.call(this, options);\n    _this.credentials = {\n      expiry_date: 1,\n      refresh_token: 'impersonated-placeholder'\n    };\n    _this.sourceClient = (_a = options.sourceClient) !== null && _a !== void 0 ? _a : new oauth2client_1.OAuth2Client();\n    _this.targetPrincipal = (_b = options.targetPrincipal) !== null && _b !== void 0 ? _b : '';\n    _this.delegates = (_c = options.delegates) !== null && _c !== void 0 ? _c : [];\n    _this.targetScopes = (_d = options.targetScopes) !== null && _d !== void 0 ? _d : [];\n    _this.lifetime = (_e = options.lifetime) !== null && _e !== void 0 ? _e : 3600;\n    _this.endpoint = (_f = options.endpoint) !== null && _f !== void 0 ? _f : 'https://iamcredentials.googleapis.com';\n    return _this;\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken Unused parameter\n   */\n\n\n  _createClass(Impersonated, [{\n    key: \"refreshToken\",\n    value: function () {\n      var _refreshToken2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_refreshToken) {\n        var _a, _b, _c, _d, _e, _f, name, u, body, res, tokenResponse, status, message;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this.sourceClient.getAccessToken();\n\n              case 3:\n                name = 'projects/-/serviceAccounts/' + this.targetPrincipal;\n                u = \"\".concat(this.endpoint, \"/v1/\").concat(name, \":generateAccessToken\");\n                body = {\n                  delegates: this.delegates,\n                  scope: this.targetScopes,\n                  lifetime: this.lifetime + 's'\n                };\n                _context.next = 8;\n                return this.sourceClient.request({\n                  url: u,\n                  data: body,\n                  method: 'POST'\n                });\n\n              case 8:\n                res = _context.sent;\n                tokenResponse = res.data;\n                this.credentials.access_token = tokenResponse.accessToken;\n                this.credentials.expiry_date = Date.parse(tokenResponse.expireTime);\n                return _context.abrupt(\"return\", {\n                  tokens: this.credentials,\n                  res: res\n                });\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](0);\n                status = (_c = (_b = (_a = _context.t0 === null || _context.t0 === void 0 ? void 0 : _context.t0.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.status;\n                message = (_f = (_e = (_d = _context.t0 === null || _context.t0 === void 0 ? void 0 : _context.t0.response) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.error) === null || _f === void 0 ? void 0 : _f.message;\n\n                if (!(status && message)) {\n                  _context.next = 24;\n                  break;\n                }\n\n                _context.t0.message = \"\".concat(status, \": unable to impersonate: \").concat(message);\n                throw _context.t0;\n\n              case 24:\n                _context.t0.message = \"unable to impersonate: \".concat(_context.t0);\n                throw _context.t0;\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 15]]);\n      }));\n\n      function refreshToken(_x) {\n        return _refreshToken2.apply(this, arguments);\n      }\n\n      return refreshToken;\n    }()\n  }]);\n\n  return Impersonated;\n}(oauth2client_1.OAuth2Client);\n\nexports.Impersonated = Impersonated;","map":{"version":3,"sources":["/workspaces/MLH-hackathon-project/frontend/node_modules/google-auth-library/build/src/auth/impersonated.js"],"names":["Object","defineProperty","exports","value","Impersonated","oauth2client_1","require","options","_a","_b","_c","_d","_e","_f","credentials","expiry_date","refresh_token","sourceClient","OAuth2Client","targetPrincipal","delegates","targetScopes","lifetime","endpoint","refreshToken","getAccessToken","name","u","body","scope","request","url","data","method","res","tokenResponse","access_token","accessToken","Date","parse","expireTime","tokens","status","response","error","message"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Impersonated = void 0;\nconst oauth2client_1 = require(\"./oauth2client\");\nclass Impersonated extends oauth2client_1.OAuth2Client {\n    /**\n     * Impersonated service account credentials.\n     *\n     * Create a new access token by impersonating another service account.\n     *\n     * Impersonated Credentials allowing credentials issued to a user or\n     * service account to impersonate another. The source project using\n     * Impersonated Credentials must enable the \"IAMCredentials\" API.\n     * Also, the target service account must grant the orginating principal\n     * the \"Service Account Token Creator\" IAM role.\n     *\n     * @param {object} options - The configuration object.\n     * @param {object} [options.sourceClient] the source credential used as to\n     * acquire the impersonated credentials.\n     * @param {string} [options.targetPrincipal] the service account to\n     * impersonate.\n     * @param {string[]} [options.delegates] the chained list of delegates\n     * required to grant the final access_token. If set, the sequence of\n     * identities must have \"Service Account Token Creator\" capability granted to\n     * the preceding identity. For example, if set to [serviceAccountB,\n     * serviceAccountC], the sourceCredential must have the Token Creator role on\n     * serviceAccountB. serviceAccountB must have the Token Creator on\n     * serviceAccountC. Finally, C must have Token Creator on target_principal.\n     * If left unset, sourceCredential must have that role on targetPrincipal.\n     * @param {string[]} [options.targetScopes] scopes to request during the\n     * authorization grant.\n     * @param {number} [options.lifetime] number of seconds the delegated\n     * credential should be valid for up to 3600 seconds by default, or 43,200\n     * seconds by extending the token's lifetime, see:\n     * https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials#sa-credentials-oauth\n     * @param {string} [options.endpoint] api endpoint override.\n     */\n    constructor(options = {}) {\n        var _a, _b, _c, _d, _e, _f;\n        super(options);\n        this.credentials = {\n            expiry_date: 1,\n            refresh_token: 'impersonated-placeholder',\n        };\n        this.sourceClient = (_a = options.sourceClient) !== null && _a !== void 0 ? _a : new oauth2client_1.OAuth2Client();\n        this.targetPrincipal = (_b = options.targetPrincipal) !== null && _b !== void 0 ? _b : '';\n        this.delegates = (_c = options.delegates) !== null && _c !== void 0 ? _c : [];\n        this.targetScopes = (_d = options.targetScopes) !== null && _d !== void 0 ? _d : [];\n        this.lifetime = (_e = options.lifetime) !== null && _e !== void 0 ? _e : 3600;\n        this.endpoint = (_f = options.endpoint) !== null && _f !== void 0 ? _f : 'https://iamcredentials.googleapis.com';\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken Unused parameter\n     */\n    async refreshToken(refreshToken) {\n        var _a, _b, _c, _d, _e, _f;\n        try {\n            await this.sourceClient.getAccessToken();\n            const name = 'projects/-/serviceAccounts/' + this.targetPrincipal;\n            const u = `${this.endpoint}/v1/${name}:generateAccessToken`;\n            const body = {\n                delegates: this.delegates,\n                scope: this.targetScopes,\n                lifetime: this.lifetime + 's',\n            };\n            const res = await this.sourceClient.request({\n                url: u,\n                data: body,\n                method: 'POST',\n            });\n            const tokenResponse = res.data;\n            this.credentials.access_token = tokenResponse.accessToken;\n            this.credentials.expiry_date = Date.parse(tokenResponse.expireTime);\n            return {\n                tokens: this.credentials,\n                res,\n            };\n        }\n        catch (error) {\n            const status = (_c = (_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.status;\n            const message = (_f = (_e = (_d = error === null || error === void 0 ? void 0 : error.response) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.error) === null || _f === void 0 ? void 0 : _f.message;\n            if (status && message) {\n                error.message = `${status}: unable to impersonate: ${message}`;\n                throw error;\n            }\n            else {\n                error.message = `unable to impersonate: ${error}`;\n                throw error;\n            }\n        }\n    }\n}\nexports.Impersonated = Impersonated;\n//# sourceMappingURL=impersonated.js.map"]},"metadata":{},"sourceType":"script"}