{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _classCallCheck = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getErrorFromOAuthErrorResponse = exports.OAuthClientAuthHandler = void 0;\n\nvar querystring = require(\"querystring\");\n\nvar crypto_1 = require(\"../crypto/crypto\");\n/** List of HTTP methods that accept request bodies. */\n\n\nvar METHODS_SUPPORTING_REQUEST_BODY = ['PUT', 'POST', 'PATCH'];\n/**\n * Abstract class for handling client authentication in OAuth-based\n * operations.\n * When request-body client authentication is used, only application/json and\n * application/x-www-form-urlencoded content types for HTTP methods that support\n * request bodies are supported.\n */\n\nvar OAuthClientAuthHandler = /*#__PURE__*/function () {\n  /**\n   * Instantiates an OAuth client authentication handler.\n   * @param clientAuthentication The client auth credentials.\n   */\n  function OAuthClientAuthHandler(clientAuthentication) {\n    _classCallCheck(this, OAuthClientAuthHandler);\n\n    this.clientAuthentication = clientAuthentication;\n    this.crypto = crypto_1.createCrypto();\n  }\n  /**\n   * Applies client authentication on the OAuth request's headers or POST\n   * body but does not process the request.\n   * @param opts The GaxiosOptions whose headers or data are to be modified\n   *   depending on the client authentication mechanism to be used.\n   * @param bearerToken The optional bearer token to use for authentication.\n   *   When this is used, no client authentication credentials are needed.\n   */\n\n\n  _createClass(OAuthClientAuthHandler, [{\n    key: \"applyClientAuthenticationOptions\",\n    value: function applyClientAuthenticationOptions(opts, bearerToken) {\n      // Inject authenticated header.\n      this.injectAuthenticatedHeaders(opts, bearerToken); // Inject authenticated request body.\n\n      if (!bearerToken) {\n        this.injectAuthenticatedRequestBody(opts);\n      }\n    }\n    /**\n     * Applies client authentication on the request's header if either\n     * basic authentication or bearer token authentication is selected.\n     *\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     * @param bearerToken The optional bearer token to use for authentication.\n     *   When this is used, no client authentication credentials are needed.\n     */\n\n  }, {\n    key: \"injectAuthenticatedHeaders\",\n    value: function injectAuthenticatedHeaders(opts, bearerToken) {\n      var _a; // Bearer token prioritized higher than basic Auth.\n\n\n      if (bearerToken) {\n        opts.headers = opts.headers || {};\n        Object.assign(opts.headers, {\n          Authorization: \"Bearer \".concat(bearerToken, \"}\")\n        });\n      } else if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === 'basic') {\n        opts.headers = opts.headers || {};\n        var clientId = this.clientAuthentication.clientId;\n        var clientSecret = this.clientAuthentication.clientSecret || '';\n        var base64EncodedCreds = this.crypto.encodeBase64StringUtf8(\"\".concat(clientId, \":\").concat(clientSecret));\n        Object.assign(opts.headers, {\n          Authorization: \"Basic \".concat(base64EncodedCreds)\n        });\n      }\n    }\n    /**\n     * Applies client authentication on the request's body if request-body\n     * client authentication is selected.\n     *\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     */\n\n  }, {\n    key: \"injectAuthenticatedRequestBody\",\n    value: function injectAuthenticatedRequestBody(opts) {\n      var _a;\n\n      if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === 'request-body') {\n        var method = (opts.method || 'GET').toUpperCase(); // Inject authenticated request body.\n\n        if (METHODS_SUPPORTING_REQUEST_BODY.indexOf(method) !== -1) {\n          // Get content-type.\n          var contentType;\n          var headers = opts.headers || {};\n\n          for (var key in headers) {\n            if (key.toLowerCase() === 'content-type' && headers[key]) {\n              contentType = headers[key].toLowerCase();\n              break;\n            }\n          }\n\n          if (contentType === 'application/x-www-form-urlencoded') {\n            opts.data = opts.data || '';\n            var data = querystring.parse(opts.data);\n            Object.assign(data, {\n              client_id: this.clientAuthentication.clientId,\n              client_secret: this.clientAuthentication.clientSecret || ''\n            });\n            opts.data = querystring.stringify(data);\n          } else if (contentType === 'application/json') {\n            opts.data = opts.data || {};\n            Object.assign(opts.data, {\n              client_id: this.clientAuthentication.clientId,\n              client_secret: this.clientAuthentication.clientSecret || ''\n            });\n          } else {\n            throw new Error(\"\".concat(contentType, \" content-types are not supported with \") + \"\".concat(this.clientAuthentication.confidentialClientType, \" \") + 'client authentication');\n          }\n        } else {\n          throw new Error(\"\".concat(method, \" HTTP method does not support \") + \"\".concat(this.clientAuthentication.confidentialClientType, \" \") + 'client authentication');\n        }\n      }\n    }\n  }]);\n\n  return OAuthClientAuthHandler;\n}();\n\nexports.OAuthClientAuthHandler = OAuthClientAuthHandler;\n/**\n * Converts an OAuth error response to a native JavaScript Error.\n * @param resp The OAuth error response to convert to a native Error object.\n * @param err The optional original error. If provided, the error properties\n *   will be copied to the new error.\n * @return The converted native Error object.\n */\n\nfunction getErrorFromOAuthErrorResponse(resp, err) {\n  // Error response.\n  var errorCode = resp.error;\n  var errorDescription = resp.error_description;\n  var errorUri = resp.error_uri;\n  var message = \"Error code \".concat(errorCode);\n\n  if (typeof errorDescription !== 'undefined') {\n    message += \": \".concat(errorDescription);\n  }\n\n  if (typeof errorUri !== 'undefined') {\n    message += \" - \".concat(errorUri);\n  }\n\n  var newError = new Error(message); // Copy properties from original error to newly generated error.\n\n  if (err) {\n    var keys = Object.keys(err);\n\n    if (err.stack) {\n      // Copy error.stack if available.\n      keys.push('stack');\n    }\n\n    keys.forEach(function (key) {\n      // Do not overwrite the message field.\n      if (key !== 'message') {\n        Object.defineProperty(newError, key, {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          value: err[key],\n          writable: false,\n          enumerable: true\n        });\n      }\n    });\n  }\n\n  return newError;\n}\n\nexports.getErrorFromOAuthErrorResponse = getErrorFromOAuthErrorResponse;","map":{"version":3,"sources":["/workspaces/MLH-hackathon-project/frontend/node_modules/google-auth-library/build/src/auth/oauth2common.js"],"names":["Object","defineProperty","exports","value","getErrorFromOAuthErrorResponse","OAuthClientAuthHandler","querystring","require","crypto_1","METHODS_SUPPORTING_REQUEST_BODY","clientAuthentication","crypto","createCrypto","opts","bearerToken","injectAuthenticatedHeaders","injectAuthenticatedRequestBody","_a","headers","assign","Authorization","confidentialClientType","clientId","clientSecret","base64EncodedCreds","encodeBase64StringUtf8","method","toUpperCase","indexOf","contentType","key","toLowerCase","data","parse","client_id","client_secret","stringify","Error","resp","err","errorCode","error","errorDescription","error_description","errorUri","error_uri","message","newError","keys","stack","push","forEach","writable","enumerable"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getErrorFromOAuthErrorResponse = exports.OAuthClientAuthHandler = void 0;\nconst querystring = require(\"querystring\");\nconst crypto_1 = require(\"../crypto/crypto\");\n/** List of HTTP methods that accept request bodies. */\nconst METHODS_SUPPORTING_REQUEST_BODY = ['PUT', 'POST', 'PATCH'];\n/**\n * Abstract class for handling client authentication in OAuth-based\n * operations.\n * When request-body client authentication is used, only application/json and\n * application/x-www-form-urlencoded content types for HTTP methods that support\n * request bodies are supported.\n */\nclass OAuthClientAuthHandler {\n    /**\n     * Instantiates an OAuth client authentication handler.\n     * @param clientAuthentication The client auth credentials.\n     */\n    constructor(clientAuthentication) {\n        this.clientAuthentication = clientAuthentication;\n        this.crypto = crypto_1.createCrypto();\n    }\n    /**\n     * Applies client authentication on the OAuth request's headers or POST\n     * body but does not process the request.\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     * @param bearerToken The optional bearer token to use for authentication.\n     *   When this is used, no client authentication credentials are needed.\n     */\n    applyClientAuthenticationOptions(opts, bearerToken) {\n        // Inject authenticated header.\n        this.injectAuthenticatedHeaders(opts, bearerToken);\n        // Inject authenticated request body.\n        if (!bearerToken) {\n            this.injectAuthenticatedRequestBody(opts);\n        }\n    }\n    /**\n     * Applies client authentication on the request's header if either\n     * basic authentication or bearer token authentication is selected.\n     *\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     * @param bearerToken The optional bearer token to use for authentication.\n     *   When this is used, no client authentication credentials are needed.\n     */\n    injectAuthenticatedHeaders(opts, bearerToken) {\n        var _a;\n        // Bearer token prioritized higher than basic Auth.\n        if (bearerToken) {\n            opts.headers = opts.headers || {};\n            Object.assign(opts.headers, {\n                Authorization: `Bearer ${bearerToken}}`,\n            });\n        }\n        else if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === 'basic') {\n            opts.headers = opts.headers || {};\n            const clientId = this.clientAuthentication.clientId;\n            const clientSecret = this.clientAuthentication.clientSecret || '';\n            const base64EncodedCreds = this.crypto.encodeBase64StringUtf8(`${clientId}:${clientSecret}`);\n            Object.assign(opts.headers, {\n                Authorization: `Basic ${base64EncodedCreds}`,\n            });\n        }\n    }\n    /**\n     * Applies client authentication on the request's body if request-body\n     * client authentication is selected.\n     *\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     */\n    injectAuthenticatedRequestBody(opts) {\n        var _a;\n        if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === 'request-body') {\n            const method = (opts.method || 'GET').toUpperCase();\n            // Inject authenticated request body.\n            if (METHODS_SUPPORTING_REQUEST_BODY.indexOf(method) !== -1) {\n                // Get content-type.\n                let contentType;\n                const headers = opts.headers || {};\n                for (const key in headers) {\n                    if (key.toLowerCase() === 'content-type' && headers[key]) {\n                        contentType = headers[key].toLowerCase();\n                        break;\n                    }\n                }\n                if (contentType === 'application/x-www-form-urlencoded') {\n                    opts.data = opts.data || '';\n                    const data = querystring.parse(opts.data);\n                    Object.assign(data, {\n                        client_id: this.clientAuthentication.clientId,\n                        client_secret: this.clientAuthentication.clientSecret || '',\n                    });\n                    opts.data = querystring.stringify(data);\n                }\n                else if (contentType === 'application/json') {\n                    opts.data = opts.data || {};\n                    Object.assign(opts.data, {\n                        client_id: this.clientAuthentication.clientId,\n                        client_secret: this.clientAuthentication.clientSecret || '',\n                    });\n                }\n                else {\n                    throw new Error(`${contentType} content-types are not supported with ` +\n                        `${this.clientAuthentication.confidentialClientType} ` +\n                        'client authentication');\n                }\n            }\n            else {\n                throw new Error(`${method} HTTP method does not support ` +\n                    `${this.clientAuthentication.confidentialClientType} ` +\n                    'client authentication');\n            }\n        }\n    }\n}\nexports.OAuthClientAuthHandler = OAuthClientAuthHandler;\n/**\n * Converts an OAuth error response to a native JavaScript Error.\n * @param resp The OAuth error response to convert to a native Error object.\n * @param err The optional original error. If provided, the error properties\n *   will be copied to the new error.\n * @return The converted native Error object.\n */\nfunction getErrorFromOAuthErrorResponse(resp, err) {\n    // Error response.\n    const errorCode = resp.error;\n    const errorDescription = resp.error_description;\n    const errorUri = resp.error_uri;\n    let message = `Error code ${errorCode}`;\n    if (typeof errorDescription !== 'undefined') {\n        message += `: ${errorDescription}`;\n    }\n    if (typeof errorUri !== 'undefined') {\n        message += ` - ${errorUri}`;\n    }\n    const newError = new Error(message);\n    // Copy properties from original error to newly generated error.\n    if (err) {\n        const keys = Object.keys(err);\n        if (err.stack) {\n            // Copy error.stack if available.\n            keys.push('stack');\n        }\n        keys.forEach(key => {\n            // Do not overwrite the message field.\n            if (key !== 'message') {\n                Object.defineProperty(newError, key, {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    value: err[key],\n                    writable: false,\n                    enumerable: true,\n                });\n            }\n        });\n    }\n    return newError;\n}\nexports.getErrorFromOAuthErrorResponse = getErrorFromOAuthErrorResponse;\n//# sourceMappingURL=oauth2common.js.map"]},"metadata":{},"sourceType":"script"}