{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeCrypto = void 0;\n\nvar crypto = require(\"crypto\");\n\nvar NodeCrypto = /*#__PURE__*/function () {\n  function NodeCrypto() {\n    _classCallCheck(this, NodeCrypto);\n  }\n\n  _createClass(NodeCrypto, [{\n    key: \"sha256DigestBase64\",\n    value: function () {\n      var _sha256DigestBase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(str) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", crypto.createHash('sha256').update(str).digest('base64'));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function sha256DigestBase64(_x) {\n        return _sha256DigestBase.apply(this, arguments);\n      }\n\n      return sha256DigestBase64;\n    }()\n  }, {\n    key: \"randomBytesBase64\",\n    value: function randomBytesBase64(count) {\n      return crypto.randomBytes(count).toString('base64');\n    }\n  }, {\n    key: \"verify\",\n    value: function () {\n      var _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(pubkey, data, signature) {\n        var verifier;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                verifier = crypto.createVerify('sha256');\n                verifier.update(data);\n                verifier.end();\n                return _context2.abrupt(\"return\", verifier.verify(pubkey, signature, 'base64'));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function verify(_x2, _x3, _x4) {\n        return _verify.apply(this, arguments);\n      }\n\n      return verify;\n    }()\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(privateKey, data) {\n        var signer;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                signer = crypto.createSign('RSA-SHA256');\n                signer.update(data);\n                signer.end();\n                return _context3.abrupt(\"return\", signer.sign(privateKey, 'base64'));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function sign(_x5, _x6) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }, {\n    key: \"decodeBase64StringUtf8\",\n    value: function decodeBase64StringUtf8(base64) {\n      return Buffer.from(base64, 'base64').toString('utf-8');\n    }\n  }, {\n    key: \"encodeBase64StringUtf8\",\n    value: function encodeBase64StringUtf8(text) {\n      return Buffer.from(text, 'utf-8').toString('base64');\n    }\n    /**\n     * Computes the SHA-256 hash of the provided string.\n     * @param str The plain text string to hash.\n     * @return A promise that resolves with the SHA-256 hash of the provided\n     *   string in hexadecimal encoding.\n     */\n\n  }, {\n    key: \"sha256DigestHex\",\n    value: function () {\n      var _sha256DigestHex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(str) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", crypto.createHash('sha256').update(str).digest('hex'));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function sha256DigestHex(_x7) {\n        return _sha256DigestHex.apply(this, arguments);\n      }\n\n      return sha256DigestHex;\n    }()\n    /**\n     * Computes the HMAC hash of a message using the provided crypto key and the\n     * SHA-256 algorithm.\n     * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n     * @param msg The plain text message.\n     * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n     *   format.\n     */\n\n  }, {\n    key: \"signWithHmacSha256\",\n    value: function () {\n      var _signWithHmacSha = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(key, msg) {\n        var cryptoKey;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                cryptoKey = typeof key === 'string' ? key : toBuffer(key);\n                return _context5.abrupt(\"return\", toArrayBuffer(crypto.createHmac('sha256', cryptoKey).update(msg).digest()));\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function signWithHmacSha256(_x8, _x9) {\n        return _signWithHmacSha.apply(this, arguments);\n      }\n\n      return signWithHmacSha256;\n    }()\n  }]);\n\n  return NodeCrypto;\n}();\n\nexports.NodeCrypto = NodeCrypto;\n/**\n * Converts a Node.js Buffer to an ArrayBuffer.\n * https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer\n * @param buffer The Buffer input to covert.\n * @return The ArrayBuffer representation of the input.\n */\n\nfunction toArrayBuffer(buffer) {\n  return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n}\n/**\n * Converts an ArrayBuffer to a Node.js Buffer.\n * @param arrayBuffer The ArrayBuffer input to covert.\n * @return The Buffer representation of the input.\n */\n\n\nfunction toBuffer(arrayBuffer) {\n  return Buffer.from(arrayBuffer);\n}","map":{"version":3,"sources":["/workspaces/MLH-hackathon-project/frontend/node_modules/google-auth-library/build/src/crypto/node/crypto.js"],"names":["Object","defineProperty","exports","value","NodeCrypto","crypto","require","str","createHash","update","digest","count","randomBytes","toString","pubkey","data","signature","verifier","createVerify","end","verify","privateKey","signer","createSign","sign","base64","Buffer","from","text","key","msg","cryptoKey","toBuffer","toArrayBuffer","createHmac","buffer","slice","byteOffset","byteLength","arrayBuffer"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqB,KAAK,CAA1B;;AACA,IAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;IACMF,U;;;;;;;;uFACF,iBAAyBG,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,iDACWF,MAAM,CAACG,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCF,GAAnC,EAAwCG,MAAxC,CAA+C,QAA/C,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAGA,2BAAkBC,KAAlB,EAAyB;AACrB,aAAON,MAAM,CAACO,WAAP,CAAmBD,KAAnB,EAA0BE,QAA1B,CAAmC,QAAnC,CAAP;AACH;;;;6EACD,kBAAaC,MAAb,EAAqBC,IAArB,EAA2BC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,gBAAAA,QADV,GACqBZ,MAAM,CAACa,YAAP,CAAoB,QAApB,CADrB;AAEID,gBAAAA,QAAQ,CAACR,MAAT,CAAgBM,IAAhB;AACAE,gBAAAA,QAAQ,CAACE,GAAT;AAHJ,kDAIWF,QAAQ,CAACG,MAAT,CAAgBN,MAAhB,EAAwBE,SAAxB,EAAmC,QAAnC,CAJX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;2EAMA,kBAAWK,UAAX,EAAuBN,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACUO,gBAAAA,MADV,GACmBjB,MAAM,CAACkB,UAAP,CAAkB,YAAlB,CADnB;AAEID,gBAAAA,MAAM,CAACb,MAAP,CAAcM,IAAd;AACAO,gBAAAA,MAAM,CAACH,GAAP;AAHJ,kDAIWG,MAAM,CAACE,IAAP,CAAYH,UAAZ,EAAwB,QAAxB,CAJX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAMA,gCAAuBI,MAAvB,EAA+B;AAC3B,aAAOC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoB,QAApB,EAA8BZ,QAA9B,CAAuC,OAAvC,CAAP;AACH;;;WACD,gCAAuBe,IAAvB,EAA6B;AACzB,aAAOF,MAAM,CAACC,IAAP,CAAYC,IAAZ,EAAkB,OAAlB,EAA2Bf,QAA3B,CAAoC,QAApC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;;sFACI,kBAAsBN,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,kDACWF,MAAM,CAACG,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCF,GAAnC,EAAwCG,MAAxC,CAA+C,KAA/C,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;;sFACI,kBAAyBmB,GAAzB,EAA8BC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,gBAAAA,SADV,GACsB,OAAOF,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgCG,QAAQ,CAACH,GAAD,CAD9D;AAAA,kDAEWI,aAAa,CAAC5B,MAAM,CAAC6B,UAAP,CAAkB,QAAlB,EAA4BH,SAA5B,EAAuCtB,MAAvC,CAA8CqB,GAA9C,EAAmDpB,MAAnD,EAAD,CAFxB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AAKJR,OAAO,CAACE,UAAR,GAAqBA,UAArB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS6B,aAAT,CAAuBE,MAAvB,EAA+B;AAC3B,SAAOA,MAAM,CAACA,MAAP,CAAcC,KAAd,CAAoBD,MAAM,CAACE,UAA3B,EAAuCF,MAAM,CAACE,UAAP,GAAoBF,MAAM,CAACG,UAAlE,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASN,QAAT,CAAkBO,WAAlB,EAA+B;AAC3B,SAAOb,MAAM,CAACC,IAAP,CAAYY,WAAZ,CAAP;AACH","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeCrypto = void 0;\nconst crypto = require(\"crypto\");\nclass NodeCrypto {\n    async sha256DigestBase64(str) {\n        return crypto.createHash('sha256').update(str).digest('base64');\n    }\n    randomBytesBase64(count) {\n        return crypto.randomBytes(count).toString('base64');\n    }\n    async verify(pubkey, data, signature) {\n        const verifier = crypto.createVerify('sha256');\n        verifier.update(data);\n        verifier.end();\n        return verifier.verify(pubkey, signature, 'base64');\n    }\n    async sign(privateKey, data) {\n        const signer = crypto.createSign('RSA-SHA256');\n        signer.update(data);\n        signer.end();\n        return signer.sign(privateKey, 'base64');\n    }\n    decodeBase64StringUtf8(base64) {\n        return Buffer.from(base64, 'base64').toString('utf-8');\n    }\n    encodeBase64StringUtf8(text) {\n        return Buffer.from(text, 'utf-8').toString('base64');\n    }\n    /**\n     * Computes the SHA-256 hash of the provided string.\n     * @param str The plain text string to hash.\n     * @return A promise that resolves with the SHA-256 hash of the provided\n     *   string in hexadecimal encoding.\n     */\n    async sha256DigestHex(str) {\n        return crypto.createHash('sha256').update(str).digest('hex');\n    }\n    /**\n     * Computes the HMAC hash of a message using the provided crypto key and the\n     * SHA-256 algorithm.\n     * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n     * @param msg The plain text message.\n     * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n     *   format.\n     */\n    async signWithHmacSha256(key, msg) {\n        const cryptoKey = typeof key === 'string' ? key : toBuffer(key);\n        return toArrayBuffer(crypto.createHmac('sha256', cryptoKey).update(msg).digest());\n    }\n}\nexports.NodeCrypto = NodeCrypto;\n/**\n * Converts a Node.js Buffer to an ArrayBuffer.\n * https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer\n * @param buffer The Buffer input to covert.\n * @return The ArrayBuffer representation of the input.\n */\nfunction toArrayBuffer(buffer) {\n    return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n}\n/**\n * Converts an ArrayBuffer to a Node.js Buffer.\n * @param arrayBuffer The ArrayBuffer input to covert.\n * @return The Buffer representation of the input.\n */\nfunction toBuffer(arrayBuffer) {\n    return Buffer.from(arrayBuffer);\n}\n//# sourceMappingURL=crypto.js.map"]},"metadata":{},"sourceType":"script"}