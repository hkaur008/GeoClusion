{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Loader = void 0;\n\nconst Container_1 = require(\"./Container\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst tsParticlesDom = [];\n\nfunction fetchError(statusCode) {\n  console.error(`Error tsParticles - fetch status: ${statusCode}`);\n  console.error(\"Error tsParticles - File config not found\");\n}\n\nclass Loader {\n  static dom() {\n    return tsParticlesDom;\n  }\n\n  static domItem(index) {\n    const dom = Loader.dom();\n    const item = dom[index];\n\n    if (item && !item.destroyed) {\n      return item;\n    }\n\n    dom.splice(index, 1);\n  }\n\n  static async load(tagId, options, index) {\n    let domContainer = document.getElementById(tagId);\n\n    if (!domContainer) {\n      domContainer = document.createElement(\"div\");\n      domContainer.id = tagId;\n      document.append(domContainer);\n    }\n\n    return Loader.set(tagId, domContainer, options, index);\n  }\n\n  static async set(id, domContainer, options, index) {\n    const currentOptions = options instanceof Array ? (0, Utils_1.itemFromArray)(options, index) : options;\n    const dom = Loader.dom();\n    const oldIndex = dom.findIndex(v => v.id === id);\n\n    if (oldIndex >= 0) {\n      const old = Loader.domItem(oldIndex);\n\n      if (old && !old.destroyed) {\n        old.destroy();\n        dom.splice(oldIndex, 1);\n      }\n    }\n\n    let canvasEl;\n    let generatedCanvas;\n\n    if (domContainer.tagName.toLowerCase() === \"canvas\") {\n      canvasEl = domContainer;\n      generatedCanvas = false;\n    } else {\n      const existingCanvases = domContainer.getElementsByTagName(\"canvas\");\n\n      if (existingCanvases.length) {\n        canvasEl = existingCanvases[0];\n\n        if (!canvasEl.className) {\n          canvasEl.className = Utils_1.Constants.canvasClass;\n        }\n\n        generatedCanvas = false;\n      } else {\n        generatedCanvas = true;\n        canvasEl = document.createElement(\"canvas\");\n        canvasEl.className = Utils_1.Constants.canvasClass;\n        canvasEl.style.width = \"100%\";\n        canvasEl.style.height = \"100%\";\n        domContainer.appendChild(canvasEl);\n      }\n    }\n\n    const newItem = new Container_1.Container(id, currentOptions);\n\n    if (oldIndex >= 0) {\n      dom.splice(oldIndex, 0, newItem);\n    } else {\n      dom.push(newItem);\n    }\n\n    newItem.canvas.loadCanvas(canvasEl, generatedCanvas);\n    await newItem.start();\n    return newItem;\n  }\n\n  static async loadJSON(tagId, jsonUrl, index) {\n    const url = jsonUrl instanceof Array ? (0, Utils_1.itemFromArray)(jsonUrl, index) : jsonUrl;\n    const response = await fetch(url);\n\n    if (response.ok) {\n      return Loader.load(tagId, await response.json());\n    } else {\n      fetchError(response.status);\n    }\n  }\n\n  static async setJSON(id, domContainer, jsonUrl, index) {\n    const url = jsonUrl instanceof Array ? (0, Utils_1.itemFromArray)(jsonUrl, index) : jsonUrl;\n    const response = await fetch(url);\n\n    if (response.ok) {\n      const options = await response.json();\n      return Loader.set(id, domContainer, options);\n    } else {\n      fetchError(response.status);\n    }\n  }\n\n  static setOnClickHandler(callback) {\n    const dom = Loader.dom();\n\n    if (dom.length === 0) {\n      throw new Error(\"Can only set click handlers after calling tsParticles.load() or tsParticles.loadJSON()\");\n    }\n\n    for (const domItem of dom) {\n      domItem.addClickHandler(callback);\n    }\n  }\n\n}\n\nexports.Loader = Loader;","map":{"version":3,"sources":["/workspaces/MLH-hackathon-project/frontend/node_modules/tsparticles/Core/Loader.js"],"names":["Object","defineProperty","exports","value","Loader","Container_1","require","Utils_1","tsParticlesDom","fetchError","statusCode","console","error","dom","domItem","index","item","destroyed","splice","load","tagId","options","domContainer","document","getElementById","createElement","id","append","set","currentOptions","Array","itemFromArray","oldIndex","findIndex","v","old","destroy","canvasEl","generatedCanvas","tagName","toLowerCase","existingCanvases","getElementsByTagName","length","className","Constants","canvasClass","style","width","height","appendChild","newItem","Container","push","canvas","loadCanvas","start","loadJSON","jsonUrl","url","response","fetch","ok","json","status","setJSON","setOnClickHandler","callback","Error","addClickHandler"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Loader = void 0;\nconst Container_1 = require(\"./Container\");\nconst Utils_1 = require(\"../Utils\");\nconst tsParticlesDom = [];\nfunction fetchError(statusCode) {\n    console.error(`Error tsParticles - fetch status: ${statusCode}`);\n    console.error(\"Error tsParticles - File config not found\");\n}\nclass Loader {\n    static dom() {\n        return tsParticlesDom;\n    }\n    static domItem(index) {\n        const dom = Loader.dom();\n        const item = dom[index];\n        if (item && !item.destroyed) {\n            return item;\n        }\n        dom.splice(index, 1);\n    }\n    static async load(tagId, options, index) {\n        let domContainer = document.getElementById(tagId);\n        if (!domContainer) {\n            domContainer = document.createElement(\"div\");\n            domContainer.id = tagId;\n            document.append(domContainer);\n        }\n        return Loader.set(tagId, domContainer, options, index);\n    }\n    static async set(id, domContainer, options, index) {\n        const currentOptions = options instanceof Array ? (0, Utils_1.itemFromArray)(options, index) : options;\n        const dom = Loader.dom();\n        const oldIndex = dom.findIndex((v) => v.id === id);\n        if (oldIndex >= 0) {\n            const old = Loader.domItem(oldIndex);\n            if (old && !old.destroyed) {\n                old.destroy();\n                dom.splice(oldIndex, 1);\n            }\n        }\n        let canvasEl;\n        let generatedCanvas;\n        if (domContainer.tagName.toLowerCase() === \"canvas\") {\n            canvasEl = domContainer;\n            generatedCanvas = false;\n        }\n        else {\n            const existingCanvases = domContainer.getElementsByTagName(\"canvas\");\n            if (existingCanvases.length) {\n                canvasEl = existingCanvases[0];\n                if (!canvasEl.className) {\n                    canvasEl.className = Utils_1.Constants.canvasClass;\n                }\n                generatedCanvas = false;\n            }\n            else {\n                generatedCanvas = true;\n                canvasEl = document.createElement(\"canvas\");\n                canvasEl.className = Utils_1.Constants.canvasClass;\n                canvasEl.style.width = \"100%\";\n                canvasEl.style.height = \"100%\";\n                domContainer.appendChild(canvasEl);\n            }\n        }\n        const newItem = new Container_1.Container(id, currentOptions);\n        if (oldIndex >= 0) {\n            dom.splice(oldIndex, 0, newItem);\n        }\n        else {\n            dom.push(newItem);\n        }\n        newItem.canvas.loadCanvas(canvasEl, generatedCanvas);\n        await newItem.start();\n        return newItem;\n    }\n    static async loadJSON(tagId, jsonUrl, index) {\n        const url = jsonUrl instanceof Array ? (0, Utils_1.itemFromArray)(jsonUrl, index) : jsonUrl;\n        const response = await fetch(url);\n        if (response.ok) {\n            return Loader.load(tagId, await response.json());\n        }\n        else {\n            fetchError(response.status);\n        }\n    }\n    static async setJSON(id, domContainer, jsonUrl, index) {\n        const url = jsonUrl instanceof Array ? (0, Utils_1.itemFromArray)(jsonUrl, index) : jsonUrl;\n        const response = await fetch(url);\n        if (response.ok) {\n            const options = await response.json();\n            return Loader.set(id, domContainer, options);\n        }\n        else {\n            fetchError(response.status);\n        }\n    }\n    static setOnClickHandler(callback) {\n        const dom = Loader.dom();\n        if (dom.length === 0) {\n            throw new Error(\"Can only set click handlers after calling tsParticles.load() or tsParticles.loadJSON()\");\n        }\n        for (const domItem of dom) {\n            domItem.addClickHandler(callback);\n        }\n    }\n}\nexports.Loader = Loader;\n"]},"metadata":{},"sourceType":"script"}