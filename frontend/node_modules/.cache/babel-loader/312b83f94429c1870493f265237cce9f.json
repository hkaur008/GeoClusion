{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/workspaces/MLH-hackathon-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IdTokenClient = void 0;\n\nvar oauth2client_1 = require(\"./oauth2client\");\n\nvar IdTokenClient = /*#__PURE__*/function (_oauth2client_1$OAuth) {\n  _inherits(IdTokenClient, _oauth2client_1$OAuth);\n\n  var _super = _createSuper(IdTokenClient);\n\n  /**\n   * Google ID Token client\n   *\n   * Retrieve access token from the metadata server.\n   * See: https://developers.google.com/compute/docs/authentication\n   */\n  function IdTokenClient(options) {\n    var _this;\n\n    _classCallCheck(this, IdTokenClient);\n\n    _this = _super.call(this);\n    _this.targetAudience = options.targetAudience;\n    _this.idTokenProvider = options.idTokenProvider;\n    return _this;\n  }\n\n  _createClass(IdTokenClient, [{\n    key: \"getRequestMetadataAsync\",\n    value: function () {\n      var _getRequestMetadataAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      url) {\n        var idToken, headers;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!this.credentials.id_token || (this.credentials.expiry_date || 0) < Date.now())) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.idTokenProvider.fetchIdToken(this.targetAudience);\n\n              case 3:\n                idToken = _context.sent;\n                this.credentials = {\n                  id_token: idToken,\n                  expiry_date: this.getIdTokenExpiryDate(idToken)\n                };\n\n              case 5:\n                headers = {\n                  Authorization: 'Bearer ' + this.credentials.id_token\n                };\n                return _context.abrupt(\"return\", {\n                  headers: headers\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getRequestMetadataAsync(_x) {\n        return _getRequestMetadataAsync.apply(this, arguments);\n      }\n\n      return getRequestMetadataAsync;\n    }()\n  }, {\n    key: \"getIdTokenExpiryDate\",\n    value: function getIdTokenExpiryDate(idToken) {\n      var payloadB64 = idToken.split('.')[1];\n\n      if (payloadB64) {\n        var payload = JSON.parse(Buffer.from(payloadB64, 'base64').toString('ascii'));\n        return payload.exp * 1000;\n      }\n    }\n  }]);\n\n  return IdTokenClient;\n}(oauth2client_1.OAuth2Client);\n\nexports.IdTokenClient = IdTokenClient;","map":{"version":3,"sources":["/workspaces/MLH-hackathon-project/frontend/node_modules/google-auth-library/build/src/auth/idtokenclient.js"],"names":["Object","defineProperty","exports","value","IdTokenClient","oauth2client_1","require","options","targetAudience","idTokenProvider","url","credentials","id_token","expiry_date","Date","now","fetchIdToken","idToken","getIdTokenExpiryDate","headers","Authorization","payloadB64","split","payload","JSON","parse","Buffer","from","toString","exp","OAuth2Client"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;;AACA,IAAMC,cAAc,GAAGC,OAAO,CAAC,gBAAD,CAA9B;;IACMF,a;;;;;AACF;AACJ;AACA;AACA;AACA;AACA;AACI,yBAAYG,OAAZ,EAAqB;AAAA;;AAAA;;AACjB;AACA,UAAKC,cAAL,GAAsBD,OAAO,CAACC,cAA9B;AACA,UAAKC,eAAL,GAAuBF,OAAO,CAACE,eAA/B;AAHiB;AAIpB;;;;;8FACD,kBACA;AACAC,MAAAA,GAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAGQ,CAAC,KAAKC,WAAL,CAAiBC,QAAlB,IACA,CAAC,KAAKD,WAAL,CAAiBE,WAAjB,IAAgC,CAAjC,IAAsCC,IAAI,CAACC,GAAL,EAJ9C;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAK8B,KAAKN,eAAL,CAAqBO,YAArB,CAAkC,KAAKR,cAAvC,CAL9B;;AAAA;AAKcS,gBAAAA,OALd;AAMQ,qBAAKN,WAAL,GAAmB;AACfC,kBAAAA,QAAQ,EAAEK,OADK;AAEfJ,kBAAAA,WAAW,EAAE,KAAKK,oBAAL,CAA0BD,OAA1B;AAFE,iBAAnB;;AANR;AAWUE,gBAAAA,OAXV,GAWoB;AACZC,kBAAAA,aAAa,EAAE,YAAY,KAAKT,WAAL,CAAiBC;AADhC,iBAXpB;AAAA,iDAcW;AAAEO,kBAAAA,OAAO,EAAPA;AAAF,iBAdX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAgBA,8BAAqBF,OAArB,EAA8B;AAC1B,UAAMI,UAAU,GAAGJ,OAAO,CAACK,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAnB;;AACA,UAAID,UAAJ,EAAgB;AACZ,YAAME,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,IAAP,CAAYN,UAAZ,EAAwB,QAAxB,EAAkCO,QAAlC,CAA2C,OAA3C,CAAX,CAAhB;AACA,eAAOL,OAAO,CAACM,GAAR,GAAc,IAArB;AACH;AACJ;;;;EAlCuBxB,cAAc,CAACyB,Y;;AAoC3C5B,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IdTokenClient = void 0;\nconst oauth2client_1 = require(\"./oauth2client\");\nclass IdTokenClient extends oauth2client_1.OAuth2Client {\n    /**\n     * Google ID Token client\n     *\n     * Retrieve access token from the metadata server.\n     * See: https://developers.google.com/compute/docs/authentication\n     */\n    constructor(options) {\n        super();\n        this.targetAudience = options.targetAudience;\n        this.idTokenProvider = options.idTokenProvider;\n    }\n    async getRequestMetadataAsync(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    url) {\n        if (!this.credentials.id_token ||\n            (this.credentials.expiry_date || 0) < Date.now()) {\n            const idToken = await this.idTokenProvider.fetchIdToken(this.targetAudience);\n            this.credentials = {\n                id_token: idToken,\n                expiry_date: this.getIdTokenExpiryDate(idToken),\n            };\n        }\n        const headers = {\n            Authorization: 'Bearer ' + this.credentials.id_token,\n        };\n        return { headers };\n    }\n    getIdTokenExpiryDate(idToken) {\n        const payloadB64 = idToken.split('.')[1];\n        if (payloadB64) {\n            const payload = JSON.parse(Buffer.from(payloadB64, 'base64').toString('ascii'));\n            return payload.exp * 1000;\n        }\n    }\n}\nexports.IdTokenClient = IdTokenClient;\n//# sourceMappingURL=idtokenclient.js.map"]},"metadata":{},"sourceType":"script"}