{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Canvas = void 0;\n\nconst Utils_1 = require(\"../Utils\");\n\nconst Utils_2 = require(\"../Utils\");\n\nclass Canvas {\n  constructor(container) {\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this.context = null;\n    this.generatedCanvas = false;\n  }\n\n  init() {\n    this.resize();\n    this.initStyle();\n    this.initCover();\n    this.initTrail();\n    this.initBackground();\n    this.paint();\n  }\n\n  loadCanvas(canvas, generatedCanvas) {\n    var _a;\n\n    if (!canvas.className) {\n      canvas.className = Utils_1.Constants.canvasClass;\n    }\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : this.generatedCanvas;\n    this.element = canvas;\n    this.originalStyle = (0, Utils_1.deepExtend)({}, this.element.style);\n    this.size.height = canvas.offsetHeight;\n    this.size.width = canvas.offsetWidth;\n    this.context = this.element.getContext(\"2d\");\n    this.container.retina.init();\n    this.initBackground();\n  }\n\n  destroy() {\n    var _a;\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    this.draw(ctx => {\n      (0, Utils_2.clear)(ctx, this.size);\n    });\n  }\n\n  paint() {\n    const options = this.container.actualOptions;\n    this.draw(ctx => {\n      if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n        (0, Utils_2.clear)(ctx, this.size);\n        this.paintBase((0, Utils_1.getStyleFromRgb)(this.coverColor, this.coverColor.a));\n      } else {\n        this.paintBase();\n      }\n    });\n  }\n\n  clear() {\n    const options = this.container.actualOptions;\n    const trail = options.particles.move.trail;\n\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n      this.paintBase((0, Utils_1.getStyleFromRgb)(this.trailFillColor, 1 / trail.length));\n    } else {\n      this.draw(ctx => {\n        (0, Utils_2.clear)(ctx, this.size);\n      });\n    }\n  }\n\n  windowResize() {\n    var _a;\n\n    if (!this.element) {\n      return;\n    }\n\n    const container = this.container;\n    this.resize();\n\n    if (((_a = this.resizeFactor) === null || _a === void 0 ? void 0 : _a.width) === 1 && this.resizeFactor.height === 1) {\n      delete this.resizeFactor;\n      return;\n    }\n\n    container.updateActualOptions();\n    container.particles.setDensity();\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.resize !== undefined) {\n        plugin.resize();\n      }\n    }\n  }\n\n  resize() {\n    if (!this.element) {\n      return;\n    }\n\n    const container = this.container;\n    const pxRatio = container.retina.pixelRatio;\n    const size = container.canvas.size;\n    const oldSize = {\n      width: size.width,\n      height: size.height\n    };\n    size.width = this.element.offsetWidth * pxRatio;\n    size.height = this.element.offsetHeight * pxRatio;\n    this.element.width = size.width;\n    this.element.height = size.height;\n\n    if (this.container.started) {\n      this.resizeFactor = {\n        width: size.width / oldSize.width,\n        height: size.height / oldSize.height\n      };\n    }\n  }\n\n  drawConnectLine(p1, p2) {\n    this.draw(ctx => {\n      var _a;\n\n      const lineStyle = this.lineStyle(p1, p2);\n\n      if (!lineStyle) {\n        return;\n      }\n\n      const pos1 = p1.getPosition();\n      const pos2 = p2.getPosition();\n      (0, Utils_1.drawConnectLine)(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n    });\n  }\n\n  drawGrabLine(particle, lineColor, opacity, mousePos) {\n    const container = this.container;\n    this.draw(ctx => {\n      var _a;\n\n      const beginPos = particle.getPosition();\n      (0, Utils_1.drawGrabLine)(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n    });\n  }\n\n  drawParticle(particle, delta) {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (particle.spawning || particle.destroyed) {\n      return;\n    }\n\n    const pfColor = particle.getFillColor();\n    const psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n\n    if (!pfColor && !psColor) {\n      return;\n    }\n\n    let [fColor, sColor] = this.getPluginParticleColors(particle);\n    const pOptions = particle.options;\n    const twinkle = pOptions.twinkle.particles;\n    const twinkling = twinkle.enable && Math.random() < twinkle.frequency;\n\n    if (!fColor || !sColor) {\n      const twinkleRgb = (0, Utils_1.colorToHsl)(twinkle.color);\n\n      if (!fColor) {\n        fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : pfColor ? pfColor : undefined;\n      }\n\n      if (!sColor) {\n        sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : psColor ? psColor : undefined;\n      }\n    }\n\n    const options = this.container.actualOptions;\n    const zIndexOptions = particle.options.zIndex;\n    const zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate;\n    const radius = particle.getRadius();\n    const opacity = twinkling ? twinkle.opacity : (_d = (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1;\n    const strokeOpacity = (_f = (_e = particle.stroke) === null || _e === void 0 ? void 0 : _e.opacity) !== null && _f !== void 0 ? _f : opacity;\n    const zOpacity = opacity * zOpacityFactor;\n    const fillColorValue = fColor ? (0, Utils_1.getStyleFromHsl)(fColor, zOpacity) : undefined;\n\n    if (!fillColorValue && !sColor) {\n      return;\n    }\n\n    this.draw(ctx => {\n      const zSizeFactor = (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate;\n      const zStrokeOpacity = strokeOpacity * zOpacityFactor;\n      const strokeColorValue = sColor ? (0, Utils_1.getStyleFromHsl)(sColor, zStrokeOpacity) : fillColorValue;\n\n      if (radius <= 0) {\n        return;\n      }\n\n      const container = this.container;\n\n      for (const updater of container.particles.updaters) {\n        if (updater.beforeDraw) {\n          updater.beforeDraw(particle);\n        }\n      }\n\n      (0, Utils_1.drawParticle)(this.container, ctx, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, options.backgroundMask.composite, radius * zSizeFactor, zOpacity, particle.options.shadow, particle.gradient);\n\n      for (const updater of container.particles.updaters) {\n        if (updater.afterDraw) {\n          updater.afterDraw(particle);\n        }\n      }\n    });\n  }\n\n  drawPlugin(plugin, delta) {\n    this.draw(ctx => {\n      (0, Utils_1.drawPlugin)(ctx, plugin, delta);\n    });\n  }\n\n  drawParticlePlugin(plugin, particle, delta) {\n    this.draw(ctx => {\n      (0, Utils_1.drawParticlePlugin)(ctx, plugin, particle, delta);\n    });\n  }\n\n  initBackground() {\n    const options = this.container.actualOptions;\n    const background = options.background;\n    const element = this.element;\n    const elementStyle = element === null || element === void 0 ? void 0 : element.style;\n\n    if (!elementStyle) {\n      return;\n    }\n\n    if (background.color) {\n      const color = (0, Utils_1.colorToRgb)(background.color);\n      elementStyle.backgroundColor = color ? (0, Utils_1.getStyleFromRgb)(color, background.opacity) : \"\";\n    } else {\n      elementStyle.backgroundColor = \"\";\n    }\n\n    elementStyle.backgroundImage = background.image || \"\";\n    elementStyle.backgroundPosition = background.position || \"\";\n    elementStyle.backgroundRepeat = background.repeat || \"\";\n    elementStyle.backgroundSize = background.size || \"\";\n  }\n\n  draw(cb) {\n    if (!this.context) {\n      return;\n    }\n\n    return cb(this.context);\n  }\n\n  initCover() {\n    const options = this.container.actualOptions;\n    const cover = options.backgroundMask.cover;\n    const color = cover.color;\n    const coverRgb = (0, Utils_1.colorToRgb)(color);\n\n    if (coverRgb) {\n      this.coverColor = {\n        r: coverRgb.r,\n        g: coverRgb.g,\n        b: coverRgb.b,\n        a: cover.opacity\n      };\n    }\n  }\n\n  initTrail() {\n    const options = this.container.actualOptions;\n    const trail = options.particles.move.trail;\n    const fillColor = (0, Utils_1.colorToRgb)(trail.fillColor);\n\n    if (fillColor) {\n      const trail = options.particles.move.trail;\n      this.trailFillColor = {\n        r: fillColor.r,\n        g: fillColor.g,\n        b: fillColor.b,\n        a: 1 / trail.length\n      };\n    }\n  }\n\n  getPluginParticleColors(particle) {\n    let fColor;\n    let sColor;\n\n    for (const [, plugin] of this.container.plugins) {\n      if (!fColor && plugin.particleFillColor) {\n        fColor = (0, Utils_1.colorToHsl)(plugin.particleFillColor(particle));\n      }\n\n      if (!sColor && plugin.particleStrokeColor) {\n        sColor = (0, Utils_1.colorToHsl)(plugin.particleStrokeColor(particle));\n      }\n\n      if (fColor && sColor) {\n        break;\n      }\n    }\n\n    return [fColor, sColor];\n  }\n\n  initStyle() {\n    const element = this.element,\n          options = this.container.actualOptions;\n\n    if (!element) {\n      return;\n    }\n\n    const originalStyle = this.originalStyle;\n\n    if (options.fullScreen.enable) {\n      this.originalStyle = (0, Utils_1.deepExtend)({}, element.style);\n      element.style.position = \"fixed\";\n      element.style.zIndex = options.fullScreen.zIndex.toString(10);\n      element.style.top = \"0\";\n      element.style.left = \"0\";\n      element.style.width = \"100%\";\n      element.style.height = \"100%\";\n    } else if (originalStyle) {\n      element.style.position = originalStyle.position;\n      element.style.zIndex = originalStyle.zIndex;\n      element.style.top = originalStyle.top;\n      element.style.left = originalStyle.left;\n      element.style.width = originalStyle.width;\n      element.style.height = originalStyle.height;\n    }\n  }\n\n  paintBase(baseColor) {\n    this.draw(ctx => {\n      (0, Utils_1.paintBase)(ctx, this.size, baseColor);\n    });\n  }\n\n  lineStyle(p1, p2) {\n    return this.draw(ctx => {\n      const options = this.container.actualOptions;\n      const connectOptions = options.interactivity.modes.connect;\n      return (0, Utils_1.gradient)(ctx, p1, p2, connectOptions.links.opacity);\n    });\n  }\n\n}\n\nexports.Canvas = Canvas;","map":{"version":3,"sources":["/workspaces/MLH-hackathon-project/frontend/node_modules/tsparticles/Core/Canvas.js"],"names":["Object","defineProperty","exports","value","Canvas","Utils_1","require","Utils_2","constructor","container","size","height","width","context","generatedCanvas","init","resize","initStyle","initCover","initTrail","initBackground","paint","loadCanvas","canvas","_a","className","Constants","canvasClass","element","remove","originalStyle","deepExtend","style","offsetHeight","offsetWidth","getContext","retina","destroy","draw","ctx","clear","options","actualOptions","backgroundMask","enable","cover","coverColor","paintBase","getStyleFromRgb","a","trail","particles","move","length","trailFillColor","windowResize","resizeFactor","updateActualOptions","setDensity","plugin","plugins","undefined","pxRatio","pixelRatio","oldSize","started","drawConnectLine","p1","p2","lineStyle","pos1","getPosition","pos2","linksWidth","drawGrabLine","particle","lineColor","opacity","mousePos","beginPos","drawParticle","delta","_b","_c","_d","_e","_f","spawning","destroyed","pfColor","getFillColor","psColor","getStrokeColor","fColor","sColor","getPluginParticleColors","pOptions","twinkle","twinkling","Math","random","frequency","twinkleRgb","colorToHsl","color","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","radius","getRadius","bubble","strokeOpacity","stroke","zOpacity","fillColorValue","getStyleFromHsl","zSizeFactor","sizeRate","zStrokeOpacity","strokeColorValue","updater","updaters","beforeDraw","composite","shadow","gradient","afterDraw","drawPlugin","drawParticlePlugin","background","elementStyle","colorToRgb","backgroundColor","backgroundImage","image","backgroundPosition","position","backgroundRepeat","repeat","backgroundSize","cb","coverRgb","r","g","b","fillColor","particleFillColor","particleStrokeColor","fullScreen","toString","top","left","baseColor","connectOptions","interactivity","modes","connect","links"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Canvas = void 0;\nconst Utils_1 = require(\"../Utils\");\nconst Utils_2 = require(\"../Utils\");\nclass Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this.context = null;\n        this.generatedCanvas = false;\n    }\n    init() {\n        this.resize();\n        this.initStyle();\n        this.initCover();\n        this.initTrail();\n        this.initBackground();\n        this.paint();\n    }\n    loadCanvas(canvas, generatedCanvas) {\n        var _a;\n        if (!canvas.className) {\n            canvas.className = Utils_1.Constants.canvasClass;\n        }\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : this.generatedCanvas;\n        this.element = canvas;\n        this.originalStyle = (0, Utils_1.deepExtend)({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this.context = this.element.getContext(\"2d\");\n        this.container.retina.init();\n        this.initBackground();\n    }\n    destroy() {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.draw((ctx) => {\n            (0, Utils_2.clear)(ctx, this.size);\n        });\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n                (0, Utils_2.clear)(ctx, this.size);\n                this.paintBase((0, Utils_1.getStyleFromRgb)(this.coverColor, this.coverColor.a));\n            }\n            else {\n                this.paintBase();\n            }\n        });\n    }\n    clear() {\n        const options = this.container.actualOptions;\n        const trail = options.particles.move.trail;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n            this.paintBase((0, Utils_1.getStyleFromRgb)(this.trailFillColor, 1 / trail.length));\n        }\n        else {\n            this.draw((ctx) => {\n                (0, Utils_2.clear)(ctx, this.size);\n            });\n        }\n    }\n    windowResize() {\n        var _a;\n        if (!this.element) {\n            return;\n        }\n        const container = this.container;\n        this.resize();\n        if (((_a = this.resizeFactor) === null || _a === void 0 ? void 0 : _a.width) === 1 && this.resizeFactor.height === 1) {\n            delete this.resizeFactor;\n            return;\n        }\n        container.updateActualOptions();\n        container.particles.setDensity();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.resize !== undefined) {\n                plugin.resize();\n            }\n        }\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container;\n        const pxRatio = container.retina.pixelRatio;\n        const size = container.canvas.size;\n        const oldSize = {\n            width: size.width,\n            height: size.height,\n        };\n        size.width = this.element.offsetWidth * pxRatio;\n        size.height = this.element.offsetHeight * pxRatio;\n        this.element.width = size.width;\n        this.element.height = size.height;\n        if (this.container.started) {\n            this.resizeFactor = {\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            };\n        }\n    }\n    drawConnectLine(p1, p2) {\n        this.draw((ctx) => {\n            var _a;\n            const lineStyle = this.lineStyle(p1, p2);\n            if (!lineStyle) {\n                return;\n            }\n            const pos1 = p1.getPosition();\n            const pos2 = p2.getPosition();\n            (0, Utils_1.drawConnectLine)(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n        });\n    }\n    drawGrabLine(particle, lineColor, opacity, mousePos) {\n        const container = this.container;\n        this.draw((ctx) => {\n            var _a;\n            const beginPos = particle.getPosition();\n            (0, Utils_1.drawGrabLine)(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n        });\n    }\n    drawParticle(particle, delta) {\n        var _a, _b, _c, _d, _e, _f;\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const pfColor = particle.getFillColor();\n        const psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n        if (!pfColor && !psColor) {\n            return;\n        }\n        let [fColor, sColor] = this.getPluginParticleColors(particle);\n        const pOptions = particle.options;\n        const twinkle = pOptions.twinkle.particles;\n        const twinkling = twinkle.enable && Math.random() < twinkle.frequency;\n        if (!fColor || !sColor) {\n            const twinkleRgb = (0, Utils_1.colorToHsl)(twinkle.color);\n            if (!fColor) {\n                fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : pfColor ? pfColor : undefined;\n            }\n            if (!sColor) {\n                sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : psColor ? psColor : undefined;\n            }\n        }\n        const options = this.container.actualOptions;\n        const zIndexOptions = particle.options.zIndex;\n        const zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate;\n        const radius = particle.getRadius();\n        const opacity = twinkling ? twinkle.opacity : (_d = (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1;\n        const strokeOpacity = (_f = (_e = particle.stroke) === null || _e === void 0 ? void 0 : _e.opacity) !== null && _f !== void 0 ? _f : opacity;\n        const zOpacity = opacity * zOpacityFactor;\n        const fillColorValue = fColor ? (0, Utils_1.getStyleFromHsl)(fColor, zOpacity) : undefined;\n        if (!fillColorValue && !sColor) {\n            return;\n        }\n        this.draw((ctx) => {\n            const zSizeFactor = (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate;\n            const zStrokeOpacity = strokeOpacity * zOpacityFactor;\n            const strokeColorValue = sColor ? (0, Utils_1.getStyleFromHsl)(sColor, zStrokeOpacity) : fillColorValue;\n            if (radius <= 0) {\n                return;\n            }\n            const container = this.container;\n            for (const updater of container.particles.updaters) {\n                if (updater.beforeDraw) {\n                    updater.beforeDraw(particle);\n                }\n            }\n            (0, Utils_1.drawParticle)(this.container, ctx, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, options.backgroundMask.composite, radius * zSizeFactor, zOpacity, particle.options.shadow, particle.gradient);\n            for (const updater of container.particles.updaters) {\n                if (updater.afterDraw) {\n                    updater.afterDraw(particle);\n                }\n            }\n        });\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx) => {\n            (0, Utils_1.drawPlugin)(ctx, plugin, delta);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx) => {\n            (0, Utils_1.drawParticlePlugin)(ctx, plugin, particle, delta);\n        });\n    }\n    initBackground() {\n        const options = this.container.actualOptions;\n        const background = options.background;\n        const element = this.element;\n        const elementStyle = element === null || element === void 0 ? void 0 : element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = (0, Utils_1.colorToRgb)(background.color);\n            elementStyle.backgroundColor = color ? (0, Utils_1.getStyleFromRgb)(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    draw(cb) {\n        if (!this.context) {\n            return;\n        }\n        return cb(this.context);\n    }\n    initCover() {\n        const options = this.container.actualOptions;\n        const cover = options.backgroundMask.cover;\n        const color = cover.color;\n        const coverRgb = (0, Utils_1.colorToRgb)(color);\n        if (coverRgb) {\n            this.coverColor = {\n                r: coverRgb.r,\n                g: coverRgb.g,\n                b: coverRgb.b,\n                a: cover.opacity,\n            };\n        }\n    }\n    initTrail() {\n        const options = this.container.actualOptions;\n        const trail = options.particles.move.trail;\n        const fillColor = (0, Utils_1.colorToRgb)(trail.fillColor);\n        if (fillColor) {\n            const trail = options.particles.move.trail;\n            this.trailFillColor = {\n                r: fillColor.r,\n                g: fillColor.g,\n                b: fillColor.b,\n                a: 1 / trail.length,\n            };\n        }\n    }\n    getPluginParticleColors(particle) {\n        let fColor;\n        let sColor;\n        for (const [, plugin] of this.container.plugins) {\n            if (!fColor && plugin.particleFillColor) {\n                fColor = (0, Utils_1.colorToHsl)(plugin.particleFillColor(particle));\n            }\n            if (!sColor && plugin.particleStrokeColor) {\n                sColor = (0, Utils_1.colorToHsl)(plugin.particleStrokeColor(particle));\n            }\n            if (fColor && sColor) {\n                break;\n            }\n        }\n        return [fColor, sColor];\n    }\n    initStyle() {\n        const element = this.element, options = this.container.actualOptions;\n        if (!element) {\n            return;\n        }\n        const originalStyle = this.originalStyle;\n        if (options.fullScreen.enable) {\n            this.originalStyle = (0, Utils_1.deepExtend)({}, element.style);\n            element.style.position = \"fixed\";\n            element.style.zIndex = options.fullScreen.zIndex.toString(10);\n            element.style.top = \"0\";\n            element.style.left = \"0\";\n            element.style.width = \"100%\";\n            element.style.height = \"100%\";\n        }\n        else if (originalStyle) {\n            element.style.position = originalStyle.position;\n            element.style.zIndex = originalStyle.zIndex;\n            element.style.top = originalStyle.top;\n            element.style.left = originalStyle.left;\n            element.style.width = originalStyle.width;\n            element.style.height = originalStyle.height;\n        }\n    }\n    paintBase(baseColor) {\n        this.draw((ctx) => {\n            (0, Utils_1.paintBase)(ctx, this.size, baseColor);\n        });\n    }\n    lineStyle(p1, p2) {\n        return this.draw((ctx) => {\n            const options = this.container.actualOptions;\n            const connectOptions = options.interactivity.modes.connect;\n            return (0, Utils_1.gradient)(ctx, p1, p2, connectOptions.links.opacity);\n        });\n    }\n}\nexports.Canvas = Canvas;\n"]},"metadata":{},"sourceType":"script"}